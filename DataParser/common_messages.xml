<?xml version="1.0"?>
<messages>
    <message id="0" name="HEARTBEAT">
        <description>The heartbeat message shows that a system or component is present and responding. The type and autopilot fields (along with the message component id), allow the receiving system to treat further messages from this system appropriately (e.g. by laying out the user interface based on the autopilot). This microservice is documented at https://mavlink.io/en/services/heartbeat.html</description>
        <field type="uint8_t" name="type" enum="MAV_TYPE">Vehicle or component type. For a flight controller component the vehicle type (quadrotor, helicopter, etc.). For other components the component type (e.g. camera, gimbal, etc.). This should be used in preference to component id for identifying the component type.</field>
        <field type="uint8_t" name="autopilot" enum="MAV_AUTOPILOT">Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.</field>
        <field type="uint8_t" name="base_mode" enum="MAV_MODE_FLAG" display="bitmask">System mode bitmap.</field>
        <field type="uint32_t" name="custom_mode">A bitfield for use for autopilot-specific flags</field>
        <field type="uint8_t" name="system_status" enum="MAV_STATE">System status flag.</field>
        <field type="uint8_t_mavlink_version" name="mavlink_version">MAVLink version, not writable by user, gets added by protocol because of magic data type: uint8_t_mavlink_version</field>
    </message>
    <message id="1" name="SYS_STATUS">
        <description>The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows whether the system is currently active or not and if an emergency occurred. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occurred it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.</description>
        <field type="uint32_t" name="onboard_control_sensors_present" enum="MAV_SYS_STATUS_SENSOR" display="bitmask" print_format="0x%04x">Bitmap showing which onboard controllers and sensors are present. Value of 0: not present. Value of 1: present.</field>
        <field type="uint32_t" name="onboard_control_sensors_enabled" enum="MAV_SYS_STATUS_SENSOR" display="bitmask" print_format="0x%04x">Bitmap showing which onboard controllers and sensors are enabled:  Value of 0: not enabled. Value of 1: enabled.</field>
        <field type="uint32_t" name="onboard_control_sensors_health" enum="MAV_SYS_STATUS_SENSOR" display="bitmask" print_format="0x%04x">Bitmap showing which onboard controllers and sensors have an error (or are operational). Value of 0: error. Value of 1: healthy.</field>
        <field type="uint16_t" name="load" units="d%">Maximum usage in percent of the mainloop time. Values: [0-1000] - should always be below 1000</field>
        <field type="uint16_t" name="voltage_battery" units="mV">Battery voltage, UINT16_MAX: Voltage not sent by autopilot</field>
        <field type="int16_t" name="current_battery" units="cA">Battery current, -1: Current not sent by autopilot</field>
        <field type="int8_t" name="battery_remaining" units="%">Battery energy remaining, -1: Battery remaining energy not sent by autopilot</field>
        <field type="uint16_t" name="drop_rate_comm" units="c%">Communication drop rate, (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)</field>
        <field type="uint16_t" name="errors_comm">Communication errors (UART, I2C, SPI, CAN), dropped packets on all links (packets that were corrupted on reception on the MAV)</field>
        <field type="uint16_t" name="errors_count1">Autopilot-specific errors</field>
        <field type="uint16_t" name="errors_count2">Autopilot-specific errors</field>
        <field type="uint16_t" name="errors_count3">Autopilot-specific errors</field>
        <field type="uint16_t" name="errors_count4">Autopilot-specific errors</field>
    </message>
    <message id="2" name="SYSTEM_TIME">
        <description>The system time is the time of the master clock, typically the computer clock of the main onboard computer.</description>
        <field type="uint64_t" name="time_unix_usec" units="us">Timestamp (UNIX epoch time).</field>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
    </message>
    <!-- FIXME to be removed / merged with SYSTEM_TIME -->
    <message id="4" name="PING">
        <description>A ping message either requesting or responding to a ping. This allows to measure the system latencies, including serial port, radio modem and UDP connections. The ping microservice is documented at https://mavlink.io/en/services/ping.html</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint32_t" name="seq">PING sequence</field>
        <field type="uint8_t" name="target_system">0: request ping from all receiving systems. If greater than 0: message is a ping response and number is the system id of the requesting system</field>
        <field type="uint8_t" name="target_component">0: request ping from all receiving components. If greater than 0: message is a ping response and number is the component id of the requesting component.</field>
    </message>
    <message id="5" name="CHANGE_OPERATOR_CONTROL">
        <description>Request to control this MAV</description>
        <field type="uint8_t" name="target_system">System the GCS requests control for</field>
        <field type="uint8_t" name="control_request">0: request control of this MAV, 1: Release control of this MAV</field>
        <field type="uint8_t" name="version" units="rad">0: key as plaintext, 1-255: future, different hashing/encryption variants. The GCS should in general use the safest mode possible initially and then gradually move down the encryption level if it gets a NACK message indicating an encryption mismatch.</field>
        <field type="char[25]" name="passkey">Password / Key, depending on version plaintext or encrypted. 25 or less characters, NULL terminated. The characters may involve A-Z, a-z, 0-9, and "!?,.-"</field>
    </message>
    <message id="6" name="CHANGE_OPERATOR_CONTROL_ACK">
        <description>Accept / deny control of this MAV</description>
        <field type="uint8_t" name="gcs_system_id">ID of the GCS this message </field>
        <field type="uint8_t" name="control_request">0: request control of this MAV, 1: Release control of this MAV</field>
        <field type="uint8_t" name="ack">0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control</field>
    </message>
    <message id="7" name="AUTH_KEY">
        <description>Emit an encrypted signature / key identifying this system. PLEASE NOTE: This protocol has been kept simple, so transmitting the key requires an encrypted channel for true safety.</description>
        <field type="char[32]" name="key">key</field>
    </message>
    <message id="8" name="LINK_NODE_STATUS">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Status generated in each node in the communication chain and injected into MAVLink stream.</description>
        <field type="uint64_t" name="timestamp" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="tx_buf" units="%">Remaining free transmit buffer space</field>
        <field type="uint8_t" name="rx_buf" units="%">Remaining free receive buffer space</field>
        <field type="uint32_t" name="tx_rate" units="bytes/s">Transmit rate</field>
        <field type="uint32_t" name="rx_rate" units="bytes/s">Receive rate</field>
        <field type="uint16_t" name="rx_parse_err" units="bytes">Number of bytes that could not be parsed correctly.</field>
        <field type="uint16_t" name="tx_overflows" units="bytes">Transmit buffer overflows. This number wraps around as it reaches UINT16_MAX</field>
        <field type="uint16_t" name="rx_overflows" units="bytes">Receive buffer overflows. This number wraps around as it reaches UINT16_MAX</field>
        <field type="uint32_t" name="messages_sent">Messages sent</field>
        <field type="uint32_t" name="messages_received">Messages received (estimated from counting seq)</field>
        <field type="uint32_t" name="messages_lost">Messages lost (estimated from counting seq)</field>
    </message>
    <message id="11" name="SET_MODE">
        <deprecated since="2015-12" replaced_by="MAV_CMD_DO_SET_MODE">Use COMMAND_LONG with MAV_CMD_DO_SET_MODE instead</deprecated>
        <description>Set the system mode, as defined by enum MAV_MODE. There is no target component id as the mode is by definition for the overall aircraft, not only for one component.</description>
        <field type="uint8_t" name="target_system">The system setting the mode</field>
        <field type="uint8_t" name="base_mode" enum="MAV_MODE">The new base mode.</field>
        <field type="uint32_t" name="custom_mode">The new autopilot-specific mode. This field can be ignored by an autopilot.</field>
    </message>
    <!-- reserved for PARAM_VALUE_UNION -->
    <message id="20" name="PARAM_REQUEST_READ">
        <description>Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -&gt; value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also https://mavlink.io/en/services/parameter.html for a full documentation of QGroundControl and IMU code.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="int16_t" name="param_index">Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)</field>
    </message>
    <message id="21" name="PARAM_REQUEST_LIST">
        <description>Request all parameters of this component. After this request, all parameters are emitted. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
    </message>
    <message id="22" name="PARAM_VALUE">
        <description>Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html</description>
        <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="float" name="param_value">Onboard parameter value</field>
        <field type="uint8_t" name="param_type" enum="MAV_PARAM_TYPE">Onboard parameter type.</field>
        <field type="uint16_t" name="param_count">Total number of onboard parameters</field>
        <field type="uint16_t" name="param_index">Index of this onboard parameter</field>
    </message>
    <message id="23" name="PARAM_SET">
        <description>Set a parameter value (write new value to permanent storage). IMPORTANT: The receiving component should acknowledge the new parameter value by sending a PARAM_VALUE message to all communication partners. This will also ensure that multiple GCS all have an up-to-date list of all parameters. If the sending GCS did not receive a PARAM_VALUE message within its timeout time, it should re-send the PARAM_SET message. The parameter microservice is documented at https://mavlink.io/en/services/parameter.html</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="float" name="param_value">Onboard parameter value</field>
        <field type="uint8_t" name="param_type" enum="MAV_PARAM_TYPE">Onboard parameter type.</field>
    </message>
    <message id="24" name="GPS_RAW_INT">
        <description>The global position, as returned by the Global Positioning System (GPS). This is
            NOT the global position estimate of the system, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="fix_type" enum="GPS_FIX_TYPE">GPS fix type.</field>
        <field type="int32_t" name="lat" units="degE7">Latitude (WGS84, EGM96 ellipsoid)</field>
        <field type="int32_t" name="lon" units="degE7">Longitude (WGS84, EGM96 ellipsoid)</field>
        <field type="int32_t" name="alt" units="mm">Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.</field>
        <field type="uint16_t" name="eph">GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="epv">GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="vel" units="cm/s">GPS ground speed. If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="cog" units="cdeg">Course over ground (NOT heading, but direction of movement) in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX</field>
        <field type="uint8_t" name="satellites_visible">Number of satellites visible. If unknown, set to 255</field>
        <extensions/>
        <field type="int32_t" name="alt_ellipsoid" units="mm">Altitude (above WGS84, EGM96 ellipsoid). Positive for up.</field>
        <field type="uint32_t" name="h_acc" units="mm">Position uncertainty. Positive for up.</field>
        <field type="uint32_t" name="v_acc" units="mm">Altitude uncertainty. Positive for up.</field>
        <field type="uint32_t" name="vel_acc" units="mm">Speed uncertainty. Positive for up.</field>
        <field type="uint32_t" name="hdg_acc" units="degE5">Heading / track uncertainty</field>
    </message>
    <message id="25" name="GPS_STATUS">
        <description>The positioning status, as reported by GPS. This message is intended to display status information about each satellite visible to the receiver. See message GLOBAL_POSITION for the global position estimate. This message can contain information for up to 20 satellites.</description>
        <field type="uint8_t" name="satellites_visible">Number of satellites visible</field>
        <field type="uint8_t[20]" name="satellite_prn">Global satellite ID</field>
        <field type="uint8_t[20]" name="satellite_used">0: Satellite not used, 1: used for localization</field>
        <field type="uint8_t[20]" name="satellite_elevation" units="deg">Elevation (0: right on top of receiver, 90: on the horizon) of satellite</field>
        <field type="uint8_t[20]" name="satellite_azimuth" units="deg">Direction of satellite, 0: 0 deg, 255: 360 deg.</field>
        <field type="uint8_t[20]" name="satellite_snr" units="dB">Signal to noise ratio of satellite</field>
    </message>
    <message id="26" name="SCALED_IMU">
        <description>The RAW IMU readings for the usual 9DOF sensor setup. This message should contain the scaled values to the described units</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="int16_t" name="xacc" units="mG">X acceleration</field>
        <field type="int16_t" name="yacc" units="mG">Y acceleration</field>
        <field type="int16_t" name="zacc" units="mG">Z acceleration</field>
        <field type="int16_t" name="xgyro" units="mrad/s">Angular speed around X axis</field>
        <field type="int16_t" name="ygyro" units="mrad/s">Angular speed around Y axis</field>
        <field type="int16_t" name="zgyro" units="mrad/s">Angular speed around Z axis</field>
        <field type="int16_t" name="xmag" units="mgauss">X Magnetic field</field>
        <field type="int16_t" name="ymag" units="mgauss">Y Magnetic field</field>
        <field type="int16_t" name="zmag" units="mgauss">Z Magnetic field</field>
        <extensions/>
        <field type="int16_t" name="temperature" units="cdegC">Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).</field>
    </message>
    <message id="27" name="RAW_IMU">
        <description>The RAW IMU readings for a 9DOF sensor, which is identified by the id (default IMU1). This message should always contain the true raw values without any scaling to allow data capture and system debugging.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="int16_t" name="xacc">X acceleration (raw)</field>
        <field type="int16_t" name="yacc">Y acceleration (raw)</field>
        <field type="int16_t" name="zacc">Z acceleration (raw)</field>
        <field type="int16_t" name="xgyro">Angular speed around X axis (raw)</field>
        <field type="int16_t" name="ygyro">Angular speed around Y axis (raw)</field>
        <field type="int16_t" name="zgyro">Angular speed around Z axis (raw)</field>
        <field type="int16_t" name="xmag">X Magnetic field (raw)</field>
        <field type="int16_t" name="ymag">Y Magnetic field (raw)</field>
        <field type="int16_t" name="zmag">Z Magnetic field (raw)</field>
        <extensions/>
        <field type="uint8_t" name="id">Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).</field>
    </message>
    <message id="28" name="RAW_PRESSURE">
        <description>The RAW pressure readings for the typical setup of one absolute pressure and one differential pressure sensor. The sensor values should be the raw, UNSCALED ADC values.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="int16_t" name="press_abs">Absolute pressure (raw)</field>
        <field type="int16_t" name="press_diff1">Differential pressure 1 (raw, 0 if nonexistent)</field>
        <field type="int16_t" name="press_diff2">Differential pressure 2 (raw, 0 if nonexistent)</field>
        <field type="int16_t" name="temperature">Raw Temperature measurement (raw)</field>
    </message>
    <message id="29" name="SCALED_PRESSURE">
        <description>The pressure readings for the typical setup of one absolute and differential pressure sensor. The units are as specified in each field.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="press_abs" units="hPa">Absolute pressure</field>
        <field type="float" name="press_diff" units="hPa">Differential pressure 1</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature</field>
    </message>
    <message id="30" name="ATTITUDE">
        <description>The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right).</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="roll" units="rad">Roll angle (-pi..+pi)</field>
        <field type="float" name="pitch" units="rad">Pitch angle (-pi..+pi)</field>
        <field type="float" name="yaw" units="rad">Yaw angle (-pi..+pi)</field>
        <field type="float" name="rollspeed" units="rad/s">Roll angular speed</field>
        <field type="float" name="pitchspeed" units="rad/s">Pitch angular speed</field>
        <field type="float" name="yawspeed" units="rad/s">Yaw angular speed</field>
    </message>
    <message id="31" name="ATTITUDE_QUATERNION">
        <description>The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="q1">Quaternion component 1, w (1 in null-rotation)</field>
        <field type="float" name="q2">Quaternion component 2, x (0 in null-rotation)</field>
        <field type="float" name="q3">Quaternion component 3, y (0 in null-rotation)</field>
        <field type="float" name="q4">Quaternion component 4, z (0 in null-rotation)</field>
        <field type="float" name="rollspeed" units="rad/s">Roll angular speed</field>
        <field type="float" name="pitchspeed" units="rad/s">Pitch angular speed</field>
        <field type="float" name="yawspeed" units="rad/s">Yaw angular speed</field>
        <extensions/>
        <field type="float[4]" name="repr_offset_q">Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode.</field>
    </message>
    <message id="32" name="LOCAL_POSITION_NED">
        <description>The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="x" units="m">X Position</field>
        <field type="float" name="y" units="m">Y Position</field>
        <field type="float" name="z" units="m">Z Position</field>
        <field type="float" name="vx" units="m/s">X Speed</field>
        <field type="float" name="vy" units="m/s">Y Speed</field>
        <field type="float" name="vz" units="m/s">Z Speed</field>
    </message>
    <message id="33" name="GLOBAL_POSITION_INT">
        <description>The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It
            is designed as scaled integer message since the resolution of float is not sufficient.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="int32_t" name="lat" units="degE7">Latitude, expressed</field>
        <field type="int32_t" name="lon" units="degE7">Longitude, expressed</field>
        <field type="int32_t" name="alt" units="mm">Altitude (MSL). Note that virtually all GPS modules provide both WGS84 and MSL.</field>
        <field type="int32_t" name="relative_alt" units="mm">Altitude above ground</field>
        <field type="int16_t" name="vx" units="cm/s">Ground X Speed (Latitude, positive north)</field>
        <field type="int16_t" name="vy" units="cm/s">Ground Y Speed (Longitude, positive east)</field>
        <field type="int16_t" name="vz" units="cm/s">Ground Z Speed (Altitude, positive down)</field>
        <field type="uint16_t" name="hdg" units="cdeg">Vehicle heading (yaw angle), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX</field>
    </message>
    <message id="34" name="RC_CHANNELS_SCALED">
        <description>The scaled values of the RC channels received: (-100%) -10000, (0%) 0, (100%) 10000. Channels that are inactive should be set to UINT16_MAX.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="port">Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.</field>
        <field type="int16_t" name="chan1_scaled">RC channel 1 value scaled.</field>
        <field type="int16_t" name="chan2_scaled">RC channel 2 value scaled.</field>
        <field type="int16_t" name="chan3_scaled">RC channel 3 value scaled.</field>
        <field type="int16_t" name="chan4_scaled">RC channel 4 value scaled.</field>
        <field type="int16_t" name="chan5_scaled">RC channel 5 value scaled.</field>
        <field type="int16_t" name="chan6_scaled">RC channel 6 value scaled.</field>
        <field type="int16_t" name="chan7_scaled">RC channel 7 value scaled.</field>
        <field type="int16_t" name="chan8_scaled">RC channel 8 value scaled.</field>
        <field type="uint8_t" name="rssi">Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.</field>
    </message>
    <message id="35" name="RC_CHANNELS_RAW">
        <description>The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="port">Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.</field>
        <field type="uint16_t" name="chan1_raw" units="us">RC channel 1 value.</field>
        <field type="uint16_t" name="chan2_raw" units="us">RC channel 2 value.</field>
        <field type="uint16_t" name="chan3_raw" units="us">RC channel 3 value.</field>
        <field type="uint16_t" name="chan4_raw" units="us">RC channel 4 value.</field>
        <field type="uint16_t" name="chan5_raw" units="us">RC channel 5 value.</field>
        <field type="uint16_t" name="chan6_raw" units="us">RC channel 6 value.</field>
        <field type="uint16_t" name="chan7_raw" units="us">RC channel 7 value.</field>
        <field type="uint16_t" name="chan8_raw" units="us">RC channel 8 value.</field>
        <field type="uint8_t" name="rssi">Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.</field>
    </message>
    <message id="36" name="SERVO_OUTPUT_RAW">
        <description>Superseded by ACTUATOR_OUTPUT_STATUS. The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.</description>
        <field type="uint32_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="port">Servo output port (set of 8 outputs = 1 port). Flight stacks running on Pixhawk should use: 0 = MAIN, 1 = AUX.</field>
        <field type="uint16_t" name="servo1_raw" units="us">Servo output 1 value</field>
        <field type="uint16_t" name="servo2_raw" units="us">Servo output 2 value</field>
        <field type="uint16_t" name="servo3_raw" units="us">Servo output 3 value</field>
        <field type="uint16_t" name="servo4_raw" units="us">Servo output 4 value</field>
        <field type="uint16_t" name="servo5_raw" units="us">Servo output 5 value</field>
        <field type="uint16_t" name="servo6_raw" units="us">Servo output 6 value</field>
        <field type="uint16_t" name="servo7_raw" units="us">Servo output 7 value</field>
        <field type="uint16_t" name="servo8_raw" units="us">Servo output 8 value</field>
        <extensions/>
        <field type="uint16_t" name="servo9_raw" units="us">Servo output 9 value</field>
        <field type="uint16_t" name="servo10_raw" units="us">Servo output 10 value</field>
        <field type="uint16_t" name="servo11_raw" units="us">Servo output 11 value</field>
        <field type="uint16_t" name="servo12_raw" units="us">Servo output 12 value</field>
        <field type="uint16_t" name="servo13_raw" units="us">Servo output 13 value</field>
        <field type="uint16_t" name="servo14_raw" units="us">Servo output 14 value</field>
        <field type="uint16_t" name="servo15_raw" units="us">Servo output 15 value</field>
        <field type="uint16_t" name="servo16_raw" units="us">Servo output 16 value</field>
    </message>
    <message id="37" name="MISSION_REQUEST_PARTIAL_LIST">
        <description>Request a partial list of mission items from the system/component. https://mavlink.io/en/services/mission.html. If start and end index are the same, just send one waypoint.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="int16_t" name="start_index">Start index</field>
        <field type="int16_t" name="end_index">End index, -1 by default (-1: send list to end). Else a valid index of the list</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="38" name="MISSION_WRITE_PARTIAL_LIST">
        <description>This message is sent to the MAV to write a partial list. If start index == end index, only one item will be transmitted / updated. If the start index is NOT 0 and above the current list size, this request should be REJECTED!</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="int16_t" name="start_index">Start index. Must be smaller / equal to the largest index of the current onboard list.</field>
        <field type="int16_t" name="end_index">End index, equal or greater than start index.</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="39" name="MISSION_ITEM">
        <description>Message encoding a mission item. This message is emitted to announce
            the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also https://mavlink.io/en/services/mission.html.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="seq">Sequence</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the waypoint.</field>
        <field type="uint16_t" name="command" enum="MAV_CMD">The scheduled action for the waypoint.</field>
        <field type="uint8_t" name="current">false:0, true:1</field>
        <field type="uint8_t" name="autocontinue">Autocontinue to next waypoint</field>
        <field type="float" name="param1">PARAM1, see MAV_CMD enum</field>
        <field type="float" name="param2">PARAM2, see MAV_CMD enum</field>
        <field type="float" name="param3">PARAM3, see MAV_CMD enum</field>
        <field type="float" name="param4">PARAM4, see MAV_CMD enum</field>
        <field type="float" name="x">PARAM5 / local: X coordinate, global: latitude</field>
        <field type="float" name="y">PARAM6 / local: Y coordinate, global: longitude</field>
        <field type="float" name="z">PARAM7 / local: Z coordinate, global: altitude (relative or absolute, depending on frame).</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="40" name="MISSION_REQUEST">
        <description>Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM message. https://mavlink.io/en/services/mission.html</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="seq">Sequence</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="41" name="MISSION_SET_CURRENT">
        <description>Set the mission item with sequence number seq as current item. This means that the MAV will continue to this mission item on the shortest path (not following the mission items in-between).</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="seq">Sequence</field>
    </message>
    <message id="42" name="MISSION_CURRENT">
        <description>Message that announces the sequence number of the current active mission item. The MAV will fly towards this mission item.</description>
        <field type="uint16_t" name="seq">Sequence</field>
    </message>
    <message id="43" name="MISSION_REQUEST_LIST">
        <description>Request the overall list of mission items from the system/component.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="44" name="MISSION_COUNT">
        <description>This message is emitted as response to MISSION_REQUEST_LIST by the MAV and to initiate a write transaction. The GCS can then request the individual mission item based on the knowledge of the total number of waypoints.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="count">Number of mission items in the sequence</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="45" name="MISSION_CLEAR_ALL">
        <description>Delete all mission items at once.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="46" name="MISSION_ITEM_REACHED">
        <description>A certain mission item has been reached. The system will either hold this position (or circle on the orbit) or (if the autocontinue on the WP was set) continue to the next waypoint.</description>
        <field type="uint16_t" name="seq">Sequence</field>
    </message>
    <message id="47" name="MISSION_ACK">
        <description>Acknowledgment message during waypoint handling. The type field states if this message is a positive ack (type=0) or if an error happened (type=non-zero).</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="type" enum="MAV_MISSION_RESULT">Mission result.</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="48" name="SET_GPS_GLOBAL_ORIGIN">
        <description>Sets the GPS co-ordinates of the vehicle local origin (0,0,0) position. Vehicle should emit GPS_GLOBAL_ORIGIN irrespective of whether the origin is changed. This enables transform between the local coordinate frame and the global (GPS) coordinate frame, which may be necessary when (for example) indoor and outdoor settings are connected and the MAV should move from in- to outdoor.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="int32_t" name="latitude" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="longitude" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="altitude" units="mm">Altitude (MSL). Positive for up.</field>
        <extensions/>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
    </message>
    <message id="49" name="GPS_GLOBAL_ORIGIN">
        <description>Publishes the GPS co-ordinates of the vehicle local origin (0,0,0) position. Emitted whenever a new GPS-Local position mapping is requested or set - e.g. following SET_GPS_GLOBAL_ORIGIN message.</description>
        <field type="int32_t" name="latitude" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="longitude" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="altitude" units="mm">Altitude (MSL). Positive for up.</field>
        <extensions/>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
    </message>
    <message id="50" name="PARAM_MAP_RC">
        <description>Bind a RC channel to a parameter. The parameter should change according to the RC channel value.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="char[16]" name="param_id">Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="int16_t" name="param_index">Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.</field>
        <field type="uint8_t" name="parameter_rc_channel_index">Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.</field>
        <field type="float" name="param_value0">Initial parameter value</field>
        <field type="float" name="scale">Scale, maps the RC range [-1, 1] to a parameter value</field>
        <field type="float" name="param_value_min">Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)</field>
        <field type="float" name="param_value_max">Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)</field>
    </message>
    <message id="51" name="MISSION_REQUEST_INT">
        <description>Request the information of the mission item with the sequence number seq. The response of the system to this message should be a MISSION_ITEM_INT message. https://mavlink.io/en/services/mission.html</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="seq">Sequence</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="52" name="MISSION_CHANGED">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>A broadcast message to notify any ground station or SDK if a mission, geofence or safe points have changed on the vehicle.</description>
        <field type="int16_t" name="start_index">Start index for partial mission change (-1 for all items).</field>
        <field type="int16_t" name="end_index">End index of a partial mission change. -1 is a synonym for the last mission item (i.e. selects all items from start_index). Ignore field if start_index=-1.</field>
        <field type="uint8_t" name="origin_sysid">System ID of the author of the new mission.</field>
        <field type="uint8_t" name="origin_compid" enum="MAV_COMPONENT">Compnent ID of the author of the new mission.</field>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="54" name="SAFETY_SET_ALLOWED_AREA">
        <description>Set a safety zone (volume), which is defined by two corners of a cube. This message can be used to tell the MAV which setpoints/waypoints to accept and which to reject. Safety areas are often enforced by national or competition regulations.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.</field>
        <field type="float" name="p1x" units="m">x position 1 / Latitude 1</field>
        <field type="float" name="p1y" units="m">y position 1 / Longitude 1</field>
        <field type="float" name="p1z" units="m">z position 1 / Altitude 1</field>
        <field type="float" name="p2x" units="m">x position 2 / Latitude 2</field>
        <field type="float" name="p2y" units="m">y position 2 / Longitude 2</field>
        <field type="float" name="p2z" units="m">z position 2 / Altitude 2</field>
    </message>
    <message id="55" name="SAFETY_ALLOWED_AREA">
        <description>Read out the safety zone the MAV currently assumes.</description>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">Coordinate frame. Can be either global, GPS, right-handed with Z axis up or local, right handed, Z axis down.</field>
        <field type="float" name="p1x" units="m">x position 1 / Latitude 1</field>
        <field type="float" name="p1y" units="m">y position 1 / Longitude 1</field>
        <field type="float" name="p1z" units="m">z position 1 / Altitude 1</field>
        <field type="float" name="p2x" units="m">x position 2 / Latitude 2</field>
        <field type="float" name="p2y" units="m">y position 2 / Longitude 2</field>
        <field type="float" name="p2z" units="m">z position 2 / Altitude 2</field>
    </message>
    <message id="61" name="ATTITUDE_QUATERNION_COV">
        <description>The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float[4]" name="q">Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)</field>
        <field type="float" name="rollspeed" units="rad/s">Roll angular speed</field>
        <field type="float" name="pitchspeed" units="rad/s">Pitch angular speed</field>
        <field type="float" name="yawspeed" units="rad/s">Yaw angular speed</field>
        <field type="float[9]" name="covariance">Row-major representation of a 3x3 attitude covariance matrix (states: roll, pitch, yaw; first three entries are the first ROW, next three entries are the second row, etc.). If unknown, assign NaN value to first element in the array.</field>
    </message>
    <message id="62" name="NAV_CONTROLLER_OUTPUT">
        <description>The state of the fixed wing navigation and position controller.</description>
        <field type="float" name="nav_roll" units="deg">Current desired roll</field>
        <field type="float" name="nav_pitch" units="deg">Current desired pitch</field>
        <field type="int16_t" name="nav_bearing" units="deg">Current desired heading</field>
        <field type="int16_t" name="target_bearing" units="deg">Bearing to current waypoint/target</field>
        <field type="uint16_t" name="wp_dist" units="m">Distance to active waypoint</field>
        <field type="float" name="alt_error" units="m">Current altitude error</field>
        <field type="float" name="aspd_error" units="m/s">Current airspeed error</field>
        <field type="float" name="xtrack_error" units="m">Current crosstrack error on x-y plane</field>
    </message>
    <message id="63" name="GLOBAL_POSITION_INT_COV">
        <description>The filtered global position (e.g. fused GPS and accelerometers). The position is in GPS-frame (right-handed, Z-up). It  is designed as scaled integer message since the resolution of float is not sufficient. NOTE: This message is intended for onboard networks / companion computers and higher-bandwidth links and optimized for accuracy and completeness. Please use the GLOBAL_POSITION_INT message for a minimal subset.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="estimator_type" enum="MAV_ESTIMATOR_TYPE">Class id of the estimator this estimate originated from.</field>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
        <field type="int32_t" name="alt" units="mm">Altitude in meters above MSL</field>
        <field type="int32_t" name="relative_alt" units="mm">Altitude above ground</field>
        <field type="float" name="vx" units="m/s">Ground X Speed (Latitude)</field>
        <field type="float" name="vy" units="m/s">Ground Y Speed (Longitude)</field>
        <field type="float" name="vz" units="m/s">Ground Z Speed (Altitude)</field>
        <field type="float[36]" name="covariance">Row-major representation of a 6x6 position and velocity 6x6 cross-covariance matrix (states: lat, lon, alt, vx, vy, vz; first six entries are the first ROW, next six entries are the second row, etc.). If unknown, assign NaN value to first element in the array.</field>
    </message>
    <message id="64" name="LOCAL_POSITION_NED_COV">
        <description>The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="estimator_type" enum="MAV_ESTIMATOR_TYPE">Class id of the estimator this estimate originated from.</field>
        <field type="float" name="x" units="m">X Position</field>
        <field type="float" name="y" units="m">Y Position</field>
        <field type="float" name="z" units="m">Z Position</field>
        <field type="float" name="vx" units="m/s">X Speed</field>
        <field type="float" name="vy" units="m/s">Y Speed</field>
        <field type="float" name="vz" units="m/s">Z Speed</field>
        <field type="float" name="ax" units="m/s/s">X Acceleration</field>
        <field type="float" name="ay" units="m/s/s">Y Acceleration</field>
        <field type="float" name="az" units="m/s/s">Z Acceleration</field>
        <field type="float[45]" name="covariance">Row-major representation of position, velocity and acceleration 9x9 cross-covariance matrix upper right triangle (states: x, y, z, vx, vy, vz, ax, ay, az; first nine entries are the first ROW, next eight entries are the second row, etc.). If unknown, assign NaN value to first element in the array.</field>
    </message>
    <message id="65" name="RC_CHANNELS">
        <description>The PPM values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.  A value of UINT16_MAX implies the channel is unused. Individual receivers/transmitters might violate this specification.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="chancount">Total number of RC channels being received. This can be larger than 18, indicating that more channels are available but not given in this message. This value should be 0 when no RC channels are available.</field>
        <field type="uint16_t" name="chan1_raw" units="us">RC channel 1 value.</field>
        <field type="uint16_t" name="chan2_raw" units="us">RC channel 2 value.</field>
        <field type="uint16_t" name="chan3_raw" units="us">RC channel 3 value.</field>
        <field type="uint16_t" name="chan4_raw" units="us">RC channel 4 value.</field>
        <field type="uint16_t" name="chan5_raw" units="us">RC channel 5 value.</field>
        <field type="uint16_t" name="chan6_raw" units="us">RC channel 6 value.</field>
        <field type="uint16_t" name="chan7_raw" units="us">RC channel 7 value.</field>
        <field type="uint16_t" name="chan8_raw" units="us">RC channel 8 value.</field>
        <field type="uint16_t" name="chan9_raw" units="us">RC channel 9 value.</field>
        <field type="uint16_t" name="chan10_raw" units="us">RC channel 10 value.</field>
        <field type="uint16_t" name="chan11_raw" units="us">RC channel 11 value.</field>
        <field type="uint16_t" name="chan12_raw" units="us">RC channel 12 value.</field>
        <field type="uint16_t" name="chan13_raw" units="us">RC channel 13 value.</field>
        <field type="uint16_t" name="chan14_raw" units="us">RC channel 14 value.</field>
        <field type="uint16_t" name="chan15_raw" units="us">RC channel 15 value.</field>
        <field type="uint16_t" name="chan16_raw" units="us">RC channel 16 value.</field>
        <field type="uint16_t" name="chan17_raw" units="us">RC channel 17 value.</field>
        <field type="uint16_t" name="chan18_raw" units="us">RC channel 18 value.</field>
        <field type="uint8_t" name="rssi">Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.</field>
    </message>
    <message id="66" name="REQUEST_DATA_STREAM">
        <deprecated since="2015-08" replaced_by="SET_MESSAGE_INTERVAL"/>
        <description>Request a data stream.</description>
        <field type="uint8_t" name="target_system">The target requested to send the message stream.</field>
        <field type="uint8_t" name="target_component">The target requested to send the message stream.</field>
        <field type="uint8_t" name="req_stream_id">The ID of the requested data stream</field>
        <field type="uint16_t" name="req_message_rate" units="Hz">The requested message rate</field>
        <field type="uint8_t" name="start_stop">1 to start sending, 0 to stop sending.</field>
    </message>
    <message id="67" name="DATA_STREAM">
        <deprecated since="2015-08" replaced_by="MESSAGE_INTERVAL"/>
        <description>Data stream status information.</description>
        <field type="uint8_t" name="stream_id">The ID of the requested data stream</field>
        <field type="uint16_t" name="message_rate" units="Hz">The message rate</field>
        <field type="uint8_t" name="on_off">1 stream is enabled, 0 stream is stopped.</field>
    </message>
    <message id="69" name="MANUAL_CONTROL">
        <description>This message provides an API for manually controlling the vehicle using standard joystick axes nomenclature, along with a joystick-like input device. Unused axes can be disabled an buttons are also transmit as boolean values of their </description>
        <field type="uint8_t" name="target">The system to be controlled.</field>
        <field type="int16_t" name="x">X-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to forward(1000)-backward(-1000) movement on a joystick and the pitch of a vehicle.</field>
        <field type="int16_t" name="y">Y-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to left(-1000)-right(1000) movement on a joystick and the roll of a vehicle.</field>
        <field type="int16_t" name="z">Z-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a separate slider movement with maximum being 1000 and minimum being -1000 on a joystick and the thrust of a vehicle. Positive values are positive thrust, negative values are negative thrust.</field>
        <field type="int16_t" name="r">R-axis, normalized to the range [-1000,1000]. A value of INT16_MAX indicates that this axis is invalid. Generally corresponds to a twisting of the joystick, with counter-clockwise being 1000 and clockwise being -1000, and the yaw of a vehicle.</field>
        <field type="uint16_t" name="buttons">A bitfield corresponding to the joystick buttons' current state, 1 for pressed, 0 for released. The lowest bit corresponds to Button 1.</field>
    </message>
    <message id="70" name="RC_CHANNELS_OVERRIDE">
        <description>The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of UINT16_MAX means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="chan1_raw" units="us">RC channel 1 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan2_raw" units="us">RC channel 2 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan3_raw" units="us">RC channel 3 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan4_raw" units="us">RC channel 4 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan5_raw" units="us">RC channel 5 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan6_raw" units="us">RC channel 6 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan7_raw" units="us">RC channel 7 value. A value of UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan8_raw" units="us">RC channel 8 value. A value of UINT16_MAX means to ignore this field.</field>
        <extensions/>
        <field type="uint16_t" name="chan9_raw" units="us">RC channel 9 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan10_raw" units="us">RC channel 10 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan11_raw" units="us">RC channel 11 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan12_raw" units="us">RC channel 12 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan13_raw" units="us">RC channel 13 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan14_raw" units="us">RC channel 14 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan15_raw" units="us">RC channel 15 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan16_raw" units="us">RC channel 16 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan17_raw" units="us">RC channel 17 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
        <field type="uint16_t" name="chan18_raw" units="us">RC channel 18 value. A value of 0 or UINT16_MAX means to ignore this field.</field>
    </message>
    <message id="73" name="MISSION_ITEM_INT">
        <description>Message encoding a mission item. This message is emitted to announce
            the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also https://mavlink.io/en/services/mission.html.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="seq">Waypoint ID (sequence number). Starts at zero. Increases monotonically for each waypoint, no gaps in the sequence (0,1,2,3,4).</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the waypoint.</field>
        <field type="uint16_t" name="command" enum="MAV_CMD">The scheduled action for the waypoint.</field>
        <field type="uint8_t" name="current">false:0, true:1</field>
        <field type="uint8_t" name="autocontinue">Autocontinue to next waypoint</field>
        <field type="float" name="param1">PARAM1, see MAV_CMD enum</field>
        <field type="float" name="param2">PARAM2, see MAV_CMD enum</field>
        <field type="float" name="param3">PARAM3, see MAV_CMD enum</field>
        <field type="float" name="param4">PARAM4, see MAV_CMD enum</field>
        <field type="int32_t" name="x">PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7</field>
        <field type="int32_t" name="y">PARAM6 / y position: local: x position in meters * 1e4, global: longitude in degrees *10^7</field>
        <field type="float" name="z">PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame.</field>
        <extensions/>
        <field type="uint8_t" name="mission_type" enum="MAV_MISSION_TYPE">Mission type.</field>
    </message>
    <message id="74" name="VFR_HUD">
        <description>Metrics typically displayed on a HUD for fixed wing aircraft.</description>
        <field type="float" name="airspeed" units="m/s">Current indicated airspeed (IAS).</field>
        <field type="float" name="groundspeed" units="m/s">Current ground speed.</field>
        <field type="int16_t" name="heading" units="deg">Current heading in compass units (0-360, 0=north).</field>
        <field type="uint16_t" name="throttle" units="%">Current throttle setting (0 to 100).</field>
        <field type="float" name="alt" units="m">Current altitude (MSL).</field>
        <field type="float" name="climb" units="m/s">Current climb rate.</field>
    </message>
    <message id="75" name="COMMAND_INT">
        <description>Message encoding a command with parameters as scaled integers. Scaling depends on the actual command value. The command microservice is documented at https://mavlink.io/en/services/command.html</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the COMMAND.</field>
        <field type="uint16_t" name="command" enum="MAV_CMD">The scheduled action for the mission item.</field>
        <field type="uint8_t" name="current">false:0, true:1</field>
        <field type="uint8_t" name="autocontinue">autocontinue to next wp</field>
        <field type="float" name="param1">PARAM1, see MAV_CMD enum</field>
        <field type="float" name="param2">PARAM2, see MAV_CMD enum</field>
        <field type="float" name="param3">PARAM3, see MAV_CMD enum</field>
        <field type="float" name="param4">PARAM4, see MAV_CMD enum</field>
        <field type="int32_t" name="x">PARAM5 / local: x position in meters * 1e4, global: latitude in degrees * 10^7</field>
        <field type="int32_t" name="y">PARAM6 / local: y position in meters * 1e4, global: longitude in degrees * 10^7</field>
        <field type="float" name="z">PARAM7 / z position: global: altitude in meters (relative or absolute, depending on frame).</field>
    </message>
    <message id="76" name="COMMAND_LONG">
        <description>Send a command with up to seven parameters to the MAV. The command microservice is documented at https://mavlink.io/en/services/command.html</description>
        <field type="uint8_t" name="target_system">System which should execute the command</field>
        <field type="uint8_t" name="target_component">Component which should execute the command, 0 for all components</field>
        <field type="uint16_t" name="command" enum="MAV_CMD">Command ID (of command to send).</field>
        <field type="uint8_t" name="confirmation">0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)</field>
        <field type="float" name="param1">Parameter 1 (for the specific command).</field>
        <field type="float" name="param2">Parameter 2 (for the specific command).</field>
        <field type="float" name="param3">Parameter 3 (for the specific command).</field>
        <field type="float" name="param4">Parameter 4 (for the specific command).</field>
        <field type="float" name="param5">Parameter 5 (for the specific command).</field>
        <field type="float" name="param6">Parameter 6 (for the specific command).</field>
        <field type="float" name="param7">Parameter 7 (for the specific command).</field>
    </message>
    <message id="77" name="COMMAND_ACK">
        <description>Report status of a command. Includes feedback whether the command was executed. The command microservice is documented at https://mavlink.io/en/services/command.html</description>
        <field type="uint16_t" name="command" enum="MAV_CMD">Command ID (of acknowledged command).</field>
        <field type="uint8_t" name="result" enum="MAV_RESULT">Result of command.</field>
        <extensions/>
        <field type="uint8_t" name="progress">WIP: Also used as result_param1, it can be set with a enum containing the errors reasons of why the command was denied or the progress percentage or 255 if unknown the progress when result is MAV_RESULT_IN_PROGRESS.</field>
        <field type="int32_t" name="result_param2">WIP: Additional parameter of the result, example: which parameter of MAV_CMD_NAV_WAYPOINT caused it to be denied.</field>
        <field type="uint8_t" name="target_system">WIP: System which requested the command to be executed</field>
        <field type="uint8_t" name="target_component">WIP: Component which requested the command to be executed</field>
    </message>
    <message id="81" name="MANUAL_SETPOINT">
        <description>Setpoint in roll, pitch, yaw and thrust from the operator</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="roll" units="rad/s">Desired roll rate</field>
        <field type="float" name="pitch" units="rad/s">Desired pitch rate</field>
        <field type="float" name="yaw" units="rad/s">Desired yaw rate</field>
        <field type="float" name="thrust">Collective thrust, normalized to 0 .. 1</field>
        <field type="uint8_t" name="mode_switch">Flight mode switch position, 0.. 255</field>
        <field type="uint8_t" name="manual_override_switch">Override mode switch position, 0.. 255</field>
    </message>
    <message id="82" name="SET_ATTITUDE_TARGET">
        <description>Sets a desired vehicle attitude. Used by an external controller to command the vehicle (manual controller or other system).</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="type_mask">Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 6: reserved, bit 7: throttle, bit 8: attitude</field>
        <field type="float[4]" name="q">Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)</field>
        <field type="float" name="body_roll_rate" units="rad/s">Body roll rate</field>
        <field type="float" name="body_pitch_rate" units="rad/s">Body pitch rate</field>
        <field type="float" name="body_yaw_rate" units="rad/s">Body yaw rate</field>
        <field type="float" name="thrust">Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)</field>
    </message>
    <message id="83" name="ATTITUDE_TARGET">
        <description>Reports the current commanded attitude of the vehicle as specified by the autopilot. This should match the commands sent in a SET_ATTITUDE_TARGET message if the vehicle is being controlled this way.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="type_mask" display="bitmask">Mappings: If any of these bits are set, the corresponding input should be ignored: bit 1: body roll rate, bit 2: body pitch rate, bit 3: body yaw rate. bit 4-bit 7: reserved, bit 8: attitude</field>
        <field type="float[4]" name="q">Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)</field>
        <field type="float" name="body_roll_rate" units="rad/s">Body roll rate</field>
        <field type="float" name="body_pitch_rate" units="rad/s">Body pitch rate</field>
        <field type="float" name="body_yaw_rate" units="rad/s">Body yaw rate</field>
        <field type="float" name="thrust">Collective thrust, normalized to 0 .. 1 (-1 .. 1 for vehicles capable of reverse trust)</field>
    </message>
    <message id="84" name="SET_POSITION_TARGET_LOCAL_NED">
        <description>Sets a desired vehicle position in a local north-east-down coordinate frame. Used by an external controller to command the vehicle (manual controller or other system).</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="coordinate_frame" enum="MAV_FRAME">Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9</field>
        <field type="uint16_t" name="type_mask" enum="POSITION_TARGET_TYPEMASK" display="bitmask">Bitmap to indicate which dimensions should be ignored by the vehicle.</field>
        <field type="float" name="x" units="m">X Position in NED frame</field>
        <field type="float" name="y" units="m">Y Position in NED frame</field>
        <field type="float" name="z" units="m">Z Position in NED frame (note, altitude is negative in NED)</field>
        <field type="float" name="vx" units="m/s">X velocity in NED frame</field>
        <field type="float" name="vy" units="m/s">Y velocity in NED frame</field>
        <field type="float" name="vz" units="m/s">Z velocity in NED frame</field>
        <field type="float" name="afx" units="m/s/s">X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afy" units="m/s/s">Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afz" units="m/s/s">Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="yaw" units="rad">yaw setpoint</field>
        <field type="float" name="yaw_rate" units="rad/s">yaw rate setpoint</field>
    </message>
    <message id="85" name="POSITION_TARGET_LOCAL_NED">
        <description>Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_LOCAL_NED if the vehicle is being controlled this way.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="coordinate_frame" enum="MAV_FRAME">Valid options are: MAV_FRAME_LOCAL_NED = 1, MAV_FRAME_LOCAL_OFFSET_NED = 7, MAV_FRAME_BODY_NED = 8, MAV_FRAME_BODY_OFFSET_NED = 9</field>
        <field type="uint16_t" name="type_mask" enum="POSITION_TARGET_TYPEMASK" display="bitmask">Bitmap to indicate which dimensions should be ignored by the vehicle.</field>
        <field type="float" name="x" units="m">X Position in NED frame</field>
        <field type="float" name="y" units="m">Y Position in NED frame</field>
        <field type="float" name="z" units="m">Z Position in NED frame (note, altitude is negative in NED)</field>
        <field type="float" name="vx" units="m/s">X velocity in NED frame</field>
        <field type="float" name="vy" units="m/s">Y velocity in NED frame</field>
        <field type="float" name="vz" units="m/s">Z velocity in NED frame</field>
        <field type="float" name="afx" units="m/s/s">X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afy" units="m/s/s">Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afz" units="m/s/s">Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="yaw" units="rad">yaw setpoint</field>
        <field type="float" name="yaw_rate" units="rad/s">yaw rate setpoint</field>
    </message>
    <message id="86" name="SET_POSITION_TARGET_GLOBAL_INT">
        <description>Sets a desired vehicle position, velocity, and/or acceleration in a global coordinate system (WGS84). Used by an external controller to command the vehicle (manual controller or other system).</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.</field>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="coordinate_frame" enum="MAV_FRAME">Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11</field>
        <field type="uint16_t" name="type_mask" enum="POSITION_TARGET_TYPEMASK" display="bitmask">Bitmap to indicate which dimensions should be ignored by the vehicle.</field>
        <field type="int32_t" name="lat_int" units="degE7">X Position in WGS84 frame</field>
        <field type="int32_t" name="lon_int" units="degE7">Y Position in WGS84 frame</field>
        <field type="float" name="alt" units="m">Altitude (MSL, Relative to home, or AGL - depending on frame)</field>
        <field type="float" name="vx" units="m/s">X velocity in NED frame</field>
        <field type="float" name="vy" units="m/s">Y velocity in NED frame</field>
        <field type="float" name="vz" units="m/s">Z velocity in NED frame</field>
        <field type="float" name="afx" units="m/s/s">X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afy" units="m/s/s">Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afz" units="m/s/s">Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="yaw" units="rad">yaw setpoint</field>
        <field type="float" name="yaw_rate" units="rad/s">yaw rate setpoint</field>
    </message>
    <message id="87" name="POSITION_TARGET_GLOBAL_INT">
        <description>Reports the current commanded vehicle position, velocity, and acceleration as specified by the autopilot. This should match the commands sent in SET_POSITION_TARGET_GLOBAL_INT if the vehicle is being controlled this way.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot). The rationale for the timestamp in the setpoint is to allow the system to compensate for the transport delay of the setpoint. This allows the system to compensate processing latency.</field>
        <field type="uint8_t" name="coordinate_frame" enum="MAV_FRAME">Valid options are: MAV_FRAME_GLOBAL_INT = 5, MAV_FRAME_GLOBAL_RELATIVE_ALT_INT = 6, MAV_FRAME_GLOBAL_TERRAIN_ALT_INT = 11</field>
        <field type="uint16_t" name="type_mask" enum="POSITION_TARGET_TYPEMASK" display="bitmask">Bitmap to indicate which dimensions should be ignored by the vehicle.</field>
        <field type="int32_t" name="lat_int" units="degE7">X Position in WGS84 frame</field>
        <field type="int32_t" name="lon_int" units="degE7">Y Position in WGS84 frame</field>
        <field type="float" name="alt" units="m">Altitude (MSL, AGL or relative to home altitude, depending on frame)</field>
        <field type="float" name="vx" units="m/s">X velocity in NED frame</field>
        <field type="float" name="vy" units="m/s">Y velocity in NED frame</field>
        <field type="float" name="vz" units="m/s">Z velocity in NED frame</field>
        <field type="float" name="afx" units="m/s/s">X acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afy" units="m/s/s">Y acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="afz" units="m/s/s">Z acceleration or force (if bit 10 of type_mask is set) in NED frame in meter / s^2 or N</field>
        <field type="float" name="yaw" units="rad">yaw setpoint</field>
        <field type="float" name="yaw_rate" units="rad/s">yaw rate setpoint</field>
    </message>
    <message id="89" name="LOCAL_POSITION_NED_SYSTEM_GLOBAL_OFFSET">
        <description>The offset in X, Y, Z and yaw between the LOCAL_POSITION_NED messages of MAV X and the global coordinate frame in NED coordinates. Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="x" units="m">X Position</field>
        <field type="float" name="y" units="m">Y Position</field>
        <field type="float" name="z" units="m">Z Position</field>
        <field type="float" name="roll" units="rad">Roll</field>
        <field type="float" name="pitch" units="rad">Pitch</field>
        <field type="float" name="yaw" units="rad">Yaw</field>
    </message>
    <message id="90" name="HIL_STATE">
        <deprecated since="2013-07" replaced_by="HIL_STATE_QUATERNION">Suffers from missing airspeed fields and singularities due to Euler angles</deprecated>
        <description>Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="roll" units="rad">Roll angle</field>
        <field type="float" name="pitch" units="rad">Pitch angle</field>
        <field type="float" name="yaw" units="rad">Yaw angle</field>
        <field type="float" name="rollspeed" units="rad/s">Body frame roll / phi angular speed</field>
        <field type="float" name="pitchspeed" units="rad/s">Body frame pitch / theta angular speed</field>
        <field type="float" name="yawspeed" units="rad/s">Body frame yaw / psi angular speed</field>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
        <field type="int32_t" name="alt" units="mm">Altitude</field>
        <field type="int16_t" name="vx" units="cm/s">Ground X Speed (Latitude)</field>
        <field type="int16_t" name="vy" units="cm/s">Ground Y Speed (Longitude)</field>
        <field type="int16_t" name="vz" units="cm/s">Ground Z Speed (Altitude)</field>
        <field type="int16_t" name="xacc" units="mG">X acceleration</field>
        <field type="int16_t" name="yacc" units="mG">Y acceleration</field>
        <field type="int16_t" name="zacc" units="mG">Z acceleration</field>
    </message>
    <message id="91" name="HIL_CONTROLS">
        <description>Sent from autopilot to simulation. Hardware in the loop control outputs</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="roll_ailerons">Control output -1 .. 1</field>
        <field type="float" name="pitch_elevator">Control output -1 .. 1</field>
        <field type="float" name="yaw_rudder">Control output -1 .. 1</field>
        <field type="float" name="throttle">Throttle 0 .. 1</field>
        <field type="float" name="aux1">Aux 1, -1 .. 1</field>
        <field type="float" name="aux2">Aux 2, -1 .. 1</field>
        <field type="float" name="aux3">Aux 3, -1 .. 1</field>
        <field type="float" name="aux4">Aux 4, -1 .. 1</field>
        <field type="uint8_t" name="mode" enum="MAV_MODE">System mode.</field>
        <field type="uint8_t" name="nav_mode">Navigation mode (MAV_NAV_MODE)</field>
    </message>
    <message id="92" name="HIL_RC_INPUTS_RAW">
        <description>Sent from simulation to autopilot. The RAW values of the RC channels received. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint16_t" name="chan1_raw" units="us">RC channel 1 value</field>
        <field type="uint16_t" name="chan2_raw" units="us">RC channel 2 value</field>
        <field type="uint16_t" name="chan3_raw" units="us">RC channel 3 value</field>
        <field type="uint16_t" name="chan4_raw" units="us">RC channel 4 value</field>
        <field type="uint16_t" name="chan5_raw" units="us">RC channel 5 value</field>
        <field type="uint16_t" name="chan6_raw" units="us">RC channel 6 value</field>
        <field type="uint16_t" name="chan7_raw" units="us">RC channel 7 value</field>
        <field type="uint16_t" name="chan8_raw" units="us">RC channel 8 value</field>
        <field type="uint16_t" name="chan9_raw" units="us">RC channel 9 value</field>
        <field type="uint16_t" name="chan10_raw" units="us">RC channel 10 value</field>
        <field type="uint16_t" name="chan11_raw" units="us">RC channel 11 value</field>
        <field type="uint16_t" name="chan12_raw" units="us">RC channel 12 value</field>
        <field type="uint8_t" name="rssi">Receive signal strength indicator in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.</field>
    </message>
    <message id="93" name="HIL_ACTUATOR_CONTROLS">
        <description>Sent from autopilot to simulation. Hardware in the loop control outputs (replacement for HIL_CONTROLS)</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float[16]" name="controls">Control outputs -1 .. 1. Channel assignment depends on the simulated hardware.</field>
        <field type="uint8_t" name="mode" enum="MAV_MODE_FLAG" display="bitmask">System mode. Includes arming state.</field>
        <field type="uint64_t" name="flags" display="bitmask">Flags as bitfield, reserved for future use.</field>
    </message>
    <message id="100" name="OPTICAL_FLOW">
        <description>Optical flow from a flow sensor (e.g. optical mouse sensor)</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="sensor_id">Sensor ID</field>
        <field type="int16_t" name="flow_x" units="dpix">Flow in x-sensor direction</field>
        <field type="int16_t" name="flow_y" units="dpix">Flow in y-sensor direction</field>
        <field type="float" name="flow_comp_m_x" units="m/s">Flow in x-sensor direction, angular-speed compensated</field>
        <field type="float" name="flow_comp_m_y" units="m/s">Flow in y-sensor direction, angular-speed compensated</field>
        <field type="uint8_t" name="quality">Optical flow quality / confidence. 0: bad, 255: maximum quality</field>
        <field type="float" name="ground_distance" units="m">Ground distance. Positive value: distance known. Negative value: Unknown distance</field>
        <extensions/>
        <field type="float" name="flow_rate_x" units="rad/s">Flow rate about X axis</field>
        <field type="float" name="flow_rate_y" units="rad/s">Flow rate about Y axis</field>
    </message>
    <message id="101" name="GLOBAL_VISION_POSITION_ESTIMATE">
        <description>Global position/attitude estimate from a vision source.</description>
        <field type="uint64_t" name="usec" units="us">Timestamp (UNIX time or since system boot)</field>
        <field type="float" name="x" units="m">Global X position</field>
        <field type="float" name="y" units="m">Global Y position</field>
        <field type="float" name="z" units="m">Global Z position</field>
        <field type="float" name="roll" units="rad">Roll angle</field>
        <field type="float" name="pitch" units="rad">Pitch angle</field>
        <field type="float" name="yaw" units="rad">Yaw angle</field>
        <extensions/>
        <field type="float[21]" name="covariance">Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x_global, y_global, z_global, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.</field>
        <field type="uint8_t" name="reset_counter">Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.</field>
    </message>
    <message id="102" name="VISION_POSITION_ESTIMATE">
        <description>Local position/attitude estimate from a vision source.</description>
        <field type="uint64_t" name="usec" units="us">Timestamp (UNIX time or time since system boot)</field>
        <field type="float" name="x" units="m">Local X position</field>
        <field type="float" name="y" units="m">Local Y position</field>
        <field type="float" name="z" units="m">Local Z position</field>
        <field type="float" name="roll" units="rad">Roll angle</field>
        <field type="float" name="pitch" units="rad">Pitch angle</field>
        <field type="float" name="yaw" units="rad">Yaw angle</field>
        <extensions/>
        <field type="float[21]" name="covariance">Row-major representation of pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.</field>
        <field type="uint8_t" name="reset_counter">Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.</field>
    </message>
    <message id="103" name="VISION_SPEED_ESTIMATE">
        <description>Speed estimate from a vision source.</description>
        <field type="uint64_t" name="usec" units="us">Timestamp (UNIX time or time since system boot)</field>
        <field type="float" name="x" units="m/s">Global X speed</field>
        <field type="float" name="y" units="m/s">Global Y speed</field>
        <field type="float" name="z" units="m/s">Global Z speed</field>
        <extensions/>
        <field type="float[9]" name="covariance">Row-major representation of 3x3 linear velocity covariance matrix (states: vx, vy, vz; 1st three entries - 1st row, etc.). If unknown, assign NaN value to first element in the array.</field>
        <field type="uint8_t" name="reset_counter">Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.</field>
    </message>
    <message id="104" name="VICON_POSITION_ESTIMATE">
        <description>Global position estimate from a Vicon motion system source.</description>
        <field type="uint64_t" name="usec" units="us">Timestamp (UNIX time or time since system boot)</field>
        <field type="float" name="x" units="m">Global X position</field>
        <field type="float" name="y" units="m">Global Y position</field>
        <field type="float" name="z" units="m">Global Z position</field>
        <field type="float" name="roll" units="rad">Roll angle</field>
        <field type="float" name="pitch" units="rad">Pitch angle</field>
        <field type="float" name="yaw" units="rad">Yaw angle</field>
        <extensions/>
        <field type="float[21]" name="covariance">Row-major representation of 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.</field>
    </message>
    <message id="105" name="HIGHRES_IMU">
        <description>The IMU readings in SI units in NED body frame</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="xacc" units="m/s/s">X acceleration</field>
        <field type="float" name="yacc" units="m/s/s">Y acceleration</field>
        <field type="float" name="zacc" units="m/s/s">Z acceleration</field>
        <field type="float" name="xgyro" units="rad/s">Angular speed around X axis</field>
        <field type="float" name="ygyro" units="rad/s">Angular speed around Y axis</field>
        <field type="float" name="zgyro" units="rad/s">Angular speed around Z axis</field>
        <field type="float" name="xmag" units="gauss">X Magnetic field</field>
        <field type="float" name="ymag" units="gauss">Y Magnetic field</field>
        <field type="float" name="zmag" units="gauss">Z Magnetic field</field>
        <field type="float" name="abs_pressure" units="mbar">Absolute pressure</field>
        <field type="float" name="diff_pressure" units="mbar">Differential pressure</field>
        <field type="float" name="pressure_alt">Altitude calculated from pressure</field>
        <field type="float" name="temperature" units="degC">Temperature</field>
        <field type="uint16_t" name="fields_updated" display="bitmask">Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature</field>
        <extensions/>
        <field type="uint8_t" name="id">Id. Ids are numbered from 0 and map to IMUs numbered from 1 (e.g. IMU1 will have a message with id=0)</field>
    </message>
    <message id="106" name="OPTICAL_FLOW_RAD">
        <description>Optical flow from an angular rate flow sensor (e.g. PX4FLOW or mouse sensor)</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="sensor_id">Sensor ID</field>
        <field type="uint32_t" name="integration_time_us" units="us">Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.</field>
        <field type="float" name="integrated_x" units="rad">Flow around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)</field>
        <field type="float" name="integrated_y" units="rad">Flow around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)</field>
        <field type="float" name="integrated_xgyro" units="rad">RH rotation around X axis</field>
        <field type="float" name="integrated_ygyro" units="rad">RH rotation around Y axis</field>
        <field type="float" name="integrated_zgyro" units="rad">RH rotation around Z axis</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature</field>
        <field type="uint8_t" name="quality">Optical flow quality / confidence. 0: no valid flow, 255: maximum quality</field>
        <field type="uint32_t" name="time_delta_distance_us" units="us">Time since the distance was sampled.</field>
        <field type="float" name="distance" units="m">Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.</field>
    </message>
    <message id="107" name="HIL_SENSOR">
        <description>The IMU readings in SI units in NED body frame</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="xacc" units="m/s/s">X acceleration</field>
        <field type="float" name="yacc" units="m/s/s">Y acceleration</field>
        <field type="float" name="zacc" units="m/s/s">Z acceleration</field>
        <field type="float" name="xgyro" units="rad/s">Angular speed around X axis in body frame</field>
        <field type="float" name="ygyro" units="rad/s">Angular speed around Y axis in body frame</field>
        <field type="float" name="zgyro" units="rad/s">Angular speed around Z axis in body frame</field>
        <field type="float" name="xmag" units="gauss">X Magnetic field</field>
        <field type="float" name="ymag" units="gauss">Y Magnetic field</field>
        <field type="float" name="zmag" units="gauss">Z Magnetic field</field>
        <field type="float" name="abs_pressure" units="mbar">Absolute pressure</field>
        <field type="float" name="diff_pressure" units="mbar">Differential pressure (airspeed)</field>
        <field type="float" name="pressure_alt">Altitude calculated from pressure</field>
        <field type="float" name="temperature" units="degC">Temperature</field>
        <field type="uint32_t" name="fields_updated" display="bitmask">Bitmap for fields that have updated since last message, bit 0 = xacc, bit 12: temperature, bit 31: full reset of attitude/position/velocities/etc was performed in sim.</field>
    </message>
    <message id="108" name="SIM_STATE">
        <description>Status of simulation environment, if used</description>
        <field type="float" name="q1">True attitude quaternion component 1, w (1 in null-rotation)</field>
        <field type="float" name="q2">True attitude quaternion component 2, x (0 in null-rotation)</field>
        <field type="float" name="q3">True attitude quaternion component 3, y (0 in null-rotation)</field>
        <field type="float" name="q4">True attitude quaternion component 4, z (0 in null-rotation)</field>
        <field type="float" name="roll">Attitude roll expressed as Euler angles, not recommended except for human-readable outputs</field>
        <field type="float" name="pitch">Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs</field>
        <field type="float" name="yaw">Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs</field>
        <field type="float" name="xacc" units="m/s/s">X acceleration</field>
        <field type="float" name="yacc" units="m/s/s">Y acceleration</field>
        <field type="float" name="zacc" units="m/s/s">Z acceleration</field>
        <field type="float" name="xgyro" units="rad/s">Angular speed around X axis</field>
        <field type="float" name="ygyro" units="rad/s">Angular speed around Y axis</field>
        <field type="float" name="zgyro" units="rad/s">Angular speed around Z axis</field>
        <field type="float" name="lat" units="deg">Latitude</field>
        <field type="float" name="lon" units="deg">Longitude</field>
        <field type="float" name="alt" units="m">Altitude</field>
        <field type="float" name="std_dev_horz">Horizontal position standard deviation</field>
        <field type="float" name="std_dev_vert">Vertical position standard deviation</field>
        <field type="float" name="vn" units="m/s">True velocity in north direction in earth-fixed NED frame</field>
        <field type="float" name="ve" units="m/s">True velocity in east direction in earth-fixed NED frame</field>
        <field type="float" name="vd" units="m/s">True velocity in down direction in earth-fixed NED frame</field>
    </message>
    <message id="109" name="RADIO_STATUS">
        <description>Status generated by radio and injected into MAVLink stream.</description>
        <field type="uint8_t" name="rssi">Local (message sender) recieved signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.</field>
        <field type="uint8_t" name="remrssi">Remote (message receiver) signal strength indication in device-dependent units/scale. Values: [0-254], 255: invalid/unknown.</field>
        <field type="uint8_t" name="txbuf" units="%">Remaining free transmitter buffer space.</field>
        <field type="uint8_t" name="noise">Local background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown.</field>
        <field type="uint8_t" name="remnoise">Remote background noise level. These are device dependent RSSI values (scale as approx 2x dB on SiK radios). Values: [0-254], 255: invalid/unknown.</field>
        <field type="uint16_t" name="rxerrors">Count of radio packet receive errors (since boot).</field>
        <field type="uint16_t" name="fixed">Count of error corrected radio packets (since boot).</field>
    </message>
    <message id="110" name="FILE_TRANSFER_PROTOCOL">
        <description>File transfer message</description>
        <field type="uint8_t" name="target_network">Network ID (0 for broadcast)</field>
        <field type="uint8_t" name="target_system">System ID (0 for broadcast)</field>
        <field type="uint8_t" name="target_component">Component ID (0 for broadcast)</field>
        <field type="uint8_t[251]" name="payload">Variable length payload. The length is defined by the remaining message length when subtracting the header and other fields.  The entire content of this block is opaque unless you understand any the encoding message_type.  The particular encoding used can be extension specific and might not always be documented as part of the mavlink specification.</field>
    </message>
    <message id="111" name="TIMESYNC">
        <description>Time synchronization message.</description>
        <field type="int64_t" name="tc1">Time sync timestamp 1</field>
        <field type="int64_t" name="ts1">Time sync timestamp 2</field>
    </message>
    <message id="112" name="CAMERA_TRIGGER">
        <description>Camera-IMU triggering and synchronisation message.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp for image frame (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint32_t" name="seq">Image frame sequence</field>
    </message>
    <message id="113" name="HIL_GPS">
        <description>The global position, as returned by the Global Positioning System (GPS). This is
            NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="fix_type">0-1: no fix, 2: 2D fix, 3: 3D fix. Some applications will not use the value of this field unless it is at least two, so always correctly fill in the fix.</field>
        <field type="int32_t" name="lat" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="lon" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="alt" units="mm">Altitude (MSL). Positive for up.</field>
        <field type="uint16_t" name="eph" units="cm">GPS HDOP horizontal dilution of position. If unknown, set to: 65535</field>
        <field type="uint16_t" name="epv" units="cm">GPS VDOP vertical dilution of position. If unknown, set to: 65535</field>
        <field type="uint16_t" name="vel" units="cm/s">GPS ground speed. If unknown, set to: 65535</field>
        <field type="int16_t" name="vn" units="cm/s">GPS velocity in north direction in earth-fixed NED frame</field>
        <field type="int16_t" name="ve" units="cm/s">GPS velocity in east direction in earth-fixed NED frame</field>
        <field type="int16_t" name="vd" units="cm/s">GPS velocity in down direction in earth-fixed NED frame</field>
        <field type="uint16_t" name="cog" units="cdeg">Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: 65535</field>
        <field type="uint8_t" name="satellites_visible">Number of satellites visible. If unknown, set to 255</field>
    </message>
    <message id="114" name="HIL_OPTICAL_FLOW">
        <description>Simulated optical flow from a flow sensor (e.g. PX4FLOW or optical mouse sensor)</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="sensor_id">Sensor ID</field>
        <field type="uint32_t" name="integration_time_us" units="us">Integration time. Divide integrated_x and integrated_y by the integration time to obtain average flow. The integration time also indicates the.</field>
        <field type="float" name="integrated_x" units="rad">Flow in radians around X axis (Sensor RH rotation about the X axis induces a positive flow. Sensor linear motion along the positive Y axis induces a negative flow.)</field>
        <field type="float" name="integrated_y" units="rad">Flow in radians around Y axis (Sensor RH rotation about the Y axis induces a positive flow. Sensor linear motion along the positive X axis induces a positive flow.)</field>
        <field type="float" name="integrated_xgyro" units="rad">RH rotation around X axis</field>
        <field type="float" name="integrated_ygyro" units="rad">RH rotation around Y axis</field>
        <field type="float" name="integrated_zgyro" units="rad">RH rotation around Z axis</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature</field>
        <field type="uint8_t" name="quality">Optical flow quality / confidence. 0: no valid flow, 255: maximum quality</field>
        <field type="uint32_t" name="time_delta_distance_us" units="us">Time since the distance was sampled.</field>
        <field type="float" name="distance" units="m">Distance to the center of the flow field. Positive value (including zero): distance known. Negative value: Unknown distance.</field>
    </message>
    <message id="115" name="HIL_STATE_QUATERNION">
        <description>Sent from simulation to autopilot, avoids in contrast to HIL_STATE singularities. This packet is useful for high throughput applications such as hardware in the loop simulations.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float[4]" name="attitude_quaternion">Vehicle attitude expressed as normalized quaternion in w, x, y, z order (with 1 0 0 0 being the null-rotation)</field>
        <field type="float" name="rollspeed" units="rad/s">Body frame roll / phi angular speed</field>
        <field type="float" name="pitchspeed" units="rad/s">Body frame pitch / theta angular speed</field>
        <field type="float" name="yawspeed" units="rad/s">Body frame yaw / psi angular speed</field>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
        <field type="int32_t" name="alt" units="mm">Altitude</field>
        <field type="int16_t" name="vx" units="cm/s">Ground X Speed (Latitude)</field>
        <field type="int16_t" name="vy" units="cm/s">Ground Y Speed (Longitude)</field>
        <field type="int16_t" name="vz" units="cm/s">Ground Z Speed (Altitude)</field>
        <field type="uint16_t" name="ind_airspeed" units="cm/s">Indicated airspeed</field>
        <field type="uint16_t" name="true_airspeed" units="cm/s">True airspeed</field>
        <field type="int16_t" name="xacc" units="mG">X acceleration</field>
        <field type="int16_t" name="yacc" units="mG">Y acceleration</field>
        <field type="int16_t" name="zacc" units="mG">Z acceleration</field>
    </message>
    <message id="116" name="SCALED_IMU2">
        <description>The RAW IMU readings for secondary 9DOF sensor setup. This message should contain the scaled values to the described units</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="int16_t" name="xacc" units="mG">X acceleration</field>
        <field type="int16_t" name="yacc" units="mG">Y acceleration</field>
        <field type="int16_t" name="zacc" units="mG">Z acceleration</field>
        <field type="int16_t" name="xgyro" units="mrad/s">Angular speed around X axis</field>
        <field type="int16_t" name="ygyro" units="mrad/s">Angular speed around Y axis</field>
        <field type="int16_t" name="zgyro" units="mrad/s">Angular speed around Z axis</field>
        <field type="int16_t" name="xmag" units="mgauss">X Magnetic field</field>
        <field type="int16_t" name="ymag" units="mgauss">Y Magnetic field</field>
        <field type="int16_t" name="zmag" units="mgauss">Z Magnetic field</field>
        <extensions/>
        <field type="int16_t" name="temperature" units="cdegC">Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).</field>
    </message>
    <message id="117" name="LOG_REQUEST_LIST">
        <description>Request a list of available logs. On some systems calling this may stop on-board logging until LOG_REQUEST_END is called.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="start">First log id (0 for first available)</field>
        <field type="uint16_t" name="end">Last log id (0xffff for last available)</field>
    </message>
    <message id="118" name="LOG_ENTRY">
        <description>Reply to LOG_REQUEST_LIST</description>
        <field type="uint16_t" name="id">Log id</field>
        <field type="uint16_t" name="num_logs">Total number of logs</field>
        <field type="uint16_t" name="last_log_num">High log number</field>
        <field type="uint32_t" name="time_utc" units="s">UTC timestamp of log since 1970, or 0 if not available</field>
        <field type="uint32_t" name="size" units="bytes">Size of the log (may be approximate)</field>
    </message>
    <message id="119" name="LOG_REQUEST_DATA">
        <description>Request a chunk of a log</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint16_t" name="id">Log id (from LOG_ENTRY reply)</field>
        <field type="uint32_t" name="ofs">Offset into the log</field>
        <field type="uint32_t" name="count" units="bytes">Number of bytes</field>
    </message>
    <message id="120" name="LOG_DATA">
        <description>Reply to LOG_REQUEST_DATA</description>
        <field type="uint16_t" name="id">Log id (from LOG_ENTRY reply)</field>
        <field type="uint32_t" name="ofs">Offset into the log</field>
        <field type="uint8_t" name="count" units="bytes">Number of bytes (zero for end of log)</field>
        <field type="uint8_t[90]" name="data">log data</field>
    </message>
    <message id="121" name="LOG_ERASE">
        <description>Erase all logs</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
    </message>
    <message id="122" name="LOG_REQUEST_END">
        <description>Stop log transfer and resume normal logging</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
    </message>
    <message id="123" name="GPS_INJECT_DATA">
        <description>Data for injecting into the onboard GPS (used for DGPS)</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint8_t" name="len" units="bytes">Data length</field>
        <field type="uint8_t[110]" name="data">Raw data (110 is enough for 12 satellites of RTCMv2)</field>
    </message>
    <message id="124" name="GPS2_RAW">
        <description>Second GPS data.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="fix_type" enum="GPS_FIX_TYPE">GPS fix type.</field>
        <field type="int32_t" name="lat" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="lon" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="alt" units="mm">Altitude (MSL). Positive for up.</field>
        <field type="uint16_t" name="eph" units="cm">GPS HDOP horizontal dilution of position. If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="epv" units="cm">GPS VDOP vertical dilution of position. If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="vel" units="cm/s">GPS ground speed. If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="cog" units="cdeg">Course over ground (NOT heading, but direction of movement): 0.0..359.99 degrees. If unknown, set to: UINT16_MAX</field>
        <field type="uint8_t" name="satellites_visible">Number of satellites visible. If unknown, set to 255</field>
        <field type="uint8_t" name="dgps_numch">Number of DGPS satellites</field>
        <field type="uint32_t" name="dgps_age" units="ms">Age of DGPS info</field>
    </message>
    <message id="125" name="POWER_STATUS">
        <description>Power supply status</description>
        <field type="uint16_t" name="Vcc" units="mV">5V rail voltage.</field>
        <field type="uint16_t" name="Vservo" units="mV">Servo rail voltage.</field>
        <field type="uint16_t" name="flags" enum="MAV_POWER_STATUS" display="bitmask">Bitmap of power supply status flags.</field>
    </message>
    <message id="126" name="SERIAL_CONTROL">
        <description>Control a serial port. This can be used for raw access to an onboard serial peripheral such as a GPS or telemetry radio. It is designed to make it possible to update the devices firmware via MAVLink messages or change the devices settings. A message with zero bytes can be used to change just the baudrate.</description>
        <field type="uint8_t" name="device" enum="SERIAL_CONTROL_DEV">Serial control device type.</field>
        <field type="uint8_t" name="flags" enum="SERIAL_CONTROL_FLAG" display="bitmask">Bitmap of serial control flags.</field>
        <field type="uint16_t" name="timeout" units="ms">Timeout for reply data</field>
        <field type="uint32_t" name="baudrate" units="bits/s">Baudrate of transfer. Zero means no change.</field>
        <field type="uint8_t" name="count" units="bytes">how many bytes in this transfer</field>
        <field type="uint8_t[70]" name="data">serial data</field>
    </message>
    <message id="127" name="GPS_RTK">
        <description>RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting</description>
        <field type="uint32_t" name="time_last_baseline_ms" units="ms">Time since boot of last baseline message received.</field>
        <field type="uint8_t" name="rtk_receiver_id">Identification of connected RTK receiver.</field>
        <field type="uint16_t" name="wn">GPS Week Number of last baseline</field>
        <field type="uint32_t" name="tow" units="ms">GPS Time of Week of last baseline</field>
        <field type="uint8_t" name="rtk_health">GPS-specific health report for RTK data.</field>
        <field type="uint8_t" name="rtk_rate" units="Hz">Rate of baseline messages being received by GPS</field>
        <field type="uint8_t" name="nsats">Current number of sats used for RTK calculation.</field>
        <field type="uint8_t" name="baseline_coords_type" enum="RTK_BASELINE_COORDINATE_SYSTEM">Coordinate system of baseline</field>
        <field type="int32_t" name="baseline_a_mm" units="mm">Current baseline in ECEF x or NED north component.</field>
        <field type="int32_t" name="baseline_b_mm" units="mm">Current baseline in ECEF y or NED east component.</field>
        <field type="int32_t" name="baseline_c_mm" units="mm">Current baseline in ECEF z or NED down component.</field>
        <field type="uint32_t" name="accuracy">Current estimate of baseline accuracy.</field>
        <field type="int32_t" name="iar_num_hypotheses">Current number of integer ambiguity hypotheses.</field>
    </message>
    <message id="128" name="GPS2_RTK">
        <description>RTK GPS data. Gives information on the relative baseline calculation the GPS is reporting</description>
        <field type="uint32_t" name="time_last_baseline_ms" units="ms">Time since boot of last baseline message received.</field>
        <field type="uint8_t" name="rtk_receiver_id">Identification of connected RTK receiver.</field>
        <field type="uint16_t" name="wn">GPS Week Number of last baseline</field>
        <field type="uint32_t" name="tow" units="ms">GPS Time of Week of last baseline</field>
        <field type="uint8_t" name="rtk_health">GPS-specific health report for RTK data.</field>
        <field type="uint8_t" name="rtk_rate" units="Hz">Rate of baseline messages being received by GPS</field>
        <field type="uint8_t" name="nsats">Current number of sats used for RTK calculation.</field>
        <field type="uint8_t" name="baseline_coords_type" enum="RTK_BASELINE_COORDINATE_SYSTEM">Coordinate system of baseline</field>
        <field type="int32_t" name="baseline_a_mm" units="mm">Current baseline in ECEF x or NED north component.</field>
        <field type="int32_t" name="baseline_b_mm" units="mm">Current baseline in ECEF y or NED east component.</field>
        <field type="int32_t" name="baseline_c_mm" units="mm">Current baseline in ECEF z or NED down component.</field>
        <field type="uint32_t" name="accuracy">Current estimate of baseline accuracy.</field>
        <field type="int32_t" name="iar_num_hypotheses">Current number of integer ambiguity hypotheses.</field>
    </message>
    <message id="129" name="SCALED_IMU3">
        <description>The RAW IMU readings for 3rd 9DOF sensor setup. This message should contain the scaled values to the described units</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="int16_t" name="xacc" units="mG">X acceleration</field>
        <field type="int16_t" name="yacc" units="mG">Y acceleration</field>
        <field type="int16_t" name="zacc" units="mG">Z acceleration</field>
        <field type="int16_t" name="xgyro" units="mrad/s">Angular speed around X axis</field>
        <field type="int16_t" name="ygyro" units="mrad/s">Angular speed around Y axis</field>
        <field type="int16_t" name="zgyro" units="mrad/s">Angular speed around Z axis</field>
        <field type="int16_t" name="xmag" units="mgauss">X Magnetic field</field>
        <field type="int16_t" name="ymag" units="mgauss">Y Magnetic field</field>
        <field type="int16_t" name="zmag" units="mgauss">Z Magnetic field</field>
        <extensions/>
        <field type="int16_t" name="temperature" units="cdegC">Temperature, 0: IMU does not provide temperature values. If the IMU is at 0C it must send 1 (0.01C).</field>
    </message>
    <message id="130" name="DATA_TRANSMISSION_HANDSHAKE">
        <description>Handshake message to initiate, control and stop image streaming when using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.</description>
        <field type="uint8_t" name="type" enum="MAVLINK_DATA_STREAM_TYPE">Type of requested/acknowledged data.</field>
        <field type="uint32_t" name="size" units="bytes">total data size (set on ACK only).</field>
        <field type="uint16_t" name="width">Width of a matrix or image.</field>
        <field type="uint16_t" name="height">Height of a matrix or image.</field>
        <field type="uint16_t" name="packets">Number of packets being sent (set on ACK only).</field>
        <field type="uint8_t" name="payload" units="bytes">Payload size per packet (normally 253 byte, see DATA field size in message ENCAPSULATED_DATA) (set on ACK only).</field>
        <field type="uint8_t" name="jpg_quality" units="%">JPEG quality. Values: [1-100].</field>
    </message>
    <message id="131" name="ENCAPSULATED_DATA">
        <description>Data packet for images sent using the Image Transmission Protocol: https://mavlink.io/en/services/image_transmission.html.</description>
        <field type="uint16_t" name="seqnr">sequence number (starting with 0 on every transmission)</field>
        <field type="uint8_t[253]" name="data">image data bytes</field>
    </message>
    <message id="132" name="DISTANCE_SENSOR">
        <description>Distance sensor information for an onboard rangefinder.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint16_t" name="min_distance" units="cm">Minimum distance the sensor can measure</field>
        <field type="uint16_t" name="max_distance" units="cm">Maximum distance the sensor can measure</field>
        <field type="uint16_t" name="current_distance" units="cm">Current distance reading</field>
        <field type="uint8_t" name="type" enum="MAV_DISTANCE_SENSOR">Type of distance sensor.</field>
        <field type="uint8_t" name="id">Onboard ID of the sensor</field>
        <field type="uint8_t" name="orientation" enum="MAV_SENSOR_ORIENTATION">Direction the sensor faces. downward-facing: ROTATION_PITCH_270, upward-facing: ROTATION_PITCH_90, backward-facing: ROTATION_PITCH_180, forward-facing: ROTATION_NONE, left-facing: ROTATION_YAW_90, right-facing: ROTATION_YAW_270</field>
        <field type="uint8_t" name="covariance" units="cm^2">Measurement variance. Max standard deviation is 6cm. 255 if unknown.</field>
        <extensions/>
        <field type="float" name="horizontal_fov" units="rad">Horizontal Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.</field>
        <field type="float" name="vertical_fov" units="rad">Vertical Field of View (angle) where the distance measurement is valid and the field of view is known. Otherwise this is set to 0.</field>
        <field type="float[4]" name="quaternion">Quaternion of the sensor orientation in vehicle body frame (w, x, y, z order, zero-rotation is 1, 0, 0, 0). Zero-rotation is along the vehicle body x-axis. This field is required if the orientation is set to MAV_SENSOR_ROTATION_CUSTOM. Set it to 0 if invalid."</field>
    </message>
    <message id="133" name="TERRAIN_REQUEST">
        <description>Request for terrain data and terrain status</description>
        <field type="int32_t" name="lat" units="degE7">Latitude of SW corner of first grid</field>
        <field type="int32_t" name="lon" units="degE7">Longitude of SW corner of first grid</field>
        <field type="uint16_t" name="grid_spacing" units="m">Grid spacing</field>
        <field type="uint64_t" name="mask" display="bitmask" print_format="0x%07x">Bitmask of requested 4x4 grids (row major 8x7 array of grids, 56 bits)</field>
    </message>
    <message id="134" name="TERRAIN_DATA">
        <description>Terrain data sent from GCS. The lat/lon and grid_spacing must be the same as a lat/lon from a TERRAIN_REQUEST</description>
        <field type="int32_t" name="lat" units="degE7">Latitude of SW corner of first grid</field>
        <field type="int32_t" name="lon" units="degE7">Longitude of SW corner of first grid</field>
        <field type="uint16_t" name="grid_spacing" units="m">Grid spacing</field>
        <field type="uint8_t" name="gridbit">bit within the terrain request mask</field>
        <field type="int16_t[16]" name="data" units="m">Terrain data MSL</field>
    </message>
    <message id="135" name="TERRAIN_CHECK">
        <description>Request that the vehicle report terrain height at the given location. Used by GCS to check if vehicle has all terrain data needed for a mission.</description>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
    </message>
    <message id="136" name="TERRAIN_REPORT">
        <description>Response from a TERRAIN_CHECK request</description>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
        <field type="uint16_t" name="spacing">grid spacing (zero if terrain at this location unavailable)</field>
        <field type="float" name="terrain_height" units="m">Terrain height MSL</field>
        <field type="float" name="current_height" units="m">Current vehicle height above lat/lon terrain height</field>
        <field type="uint16_t" name="pending">Number of 4x4 terrain blocks waiting to be received or read from disk</field>
        <field type="uint16_t" name="loaded">Number of 4x4 terrain blocks in memory</field>
    </message>
    <message id="137" name="SCALED_PRESSURE2">
        <description>Barometer readings for 2nd barometer</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="press_abs" units="hPa">Absolute pressure</field>
        <field type="float" name="press_diff" units="hPa">Differential pressure</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature measurement</field>
    </message>
    <message id="138" name="ATT_POS_MOCAP">
        <description>Motion capture attitude and position</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float[4]" name="q">Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)</field>
        <field type="float" name="x" units="m">X position (NED)</field>
        <field type="float" name="y" units="m">Y position (NED)</field>
        <field type="float" name="z" units="m">Z position (NED)</field>
        <extensions/>
        <field type="float[21]" name="covariance">Row-major representation of a pose 6x6 cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.</field>
    </message>
    <message id="139" name="SET_ACTUATOR_CONTROL_TARGET">
        <description>Set the vehicle attitude and body angular rates.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="group_mlx">Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.</field>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="float[8]" name="controls">Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.</field>
    </message>
    <message id="140" name="ACTUATOR_CONTROL_TARGET">
        <description>Set the vehicle attitude and body angular rates.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="group_mlx">Actuator group. The "_mlx" indicates this is a multi-instance message and a MAVLink parser should use this field to difference between instances.</field>
        <field type="float[8]" name="controls">Actuator controls. Normed to -1..+1 where 0 is neutral position. Throttle for single rotation direction motors is 0..1, negative range for reverse direction. Standard mapping for attitude controls (group 0): (index 0-7): roll, pitch, yaw, throttle, flaps, spoilers, airbrakes, landing gear. Load a pass-through mixer to repurpose them as generic outputs.</field>
    </message>
    <message id="141" name="ALTITUDE">
        <description>The current system altitude.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="altitude_monotonic" units="m">This altitude measure is initialized on system boot and monotonic (it is never reset, but represents the local altitude change). The only guarantee on this field is that it will never be reset and is consistent within a flight. The recommended value for this field is the uncorrected barometric altitude at boot time. This altitude will also drift and vary between flights.</field>
        <field type="float" name="altitude_amsl" units="m">This altitude measure is strictly above mean sea level and might be non-monotonic (it might reset on events like GPS lock or when a new QNH value is set). It should be the altitude to which global altitude waypoints are compared to. Note that it is *not* the GPS altitude, however, most GPS modules already output MSL by default and not the WGS84 altitude.</field>
        <field type="float" name="altitude_local" units="m">This is the local altitude in the local coordinate frame. It is not the altitude above home, but in reference to the coordinate origin (0, 0, 0). It is up-positive.</field>
        <field type="float" name="altitude_relative" units="m">This is the altitude above the home position. It resets on each change of the current home position.</field>
        <field type="float" name="altitude_terrain" units="m">This is the altitude above terrain. It might be fed by a terrain database or an altimeter. Values smaller than -1000 should be interpreted as unknown.</field>
        <field type="float" name="bottom_clearance" units="m">This is not the altitude, but the clear space below the system according to the fused clearance estimate. It generally should max out at the maximum range of e.g. the laser altimeter. It is generally a moving target. A negative value indicates no measurement available.</field>
    </message>
    <message id="142" name="RESOURCE_REQUEST">
        <description>The autopilot is requesting a resource (file, binary, other type of data)</description>
        <field type="uint8_t" name="request_id">Request ID. This ID should be re-used when sending back URI contents</field>
        <field type="uint8_t" name="uri_type">The type of requested URI. 0 = a file via URL. 1 = a UAVCAN binary</field>
        <field type="uint8_t[120]" name="uri">The requested unique resource identifier (URI). It is not necessarily a straight domain name (depends on the URI type enum)</field>
        <field type="uint8_t" name="transfer_type">The way the autopilot wants to receive the URI. 0 = MAVLink FTP. 1 = binary stream.</field>
        <field type="uint8_t[120]" name="storage">The storage path the autopilot wants the URI to be stored in. Will only be valid if the transfer_type has a storage associated (e.g. MAVLink FTP).</field>
    </message>
    <message id="143" name="SCALED_PRESSURE3">
        <description>Barometer readings for 3rd barometer</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="press_abs" units="hPa">Absolute pressure</field>
        <field type="float" name="press_diff" units="hPa">Differential pressure</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature measurement</field>
    </message>
    <message id="144" name="FOLLOW_TARGET">
        <description>Current motion information from a designated system</description>
        <field type="uint64_t" name="timestamp" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="est_capabilities">bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)</field>
        <field type="int32_t" name="lat" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="lon" units="degE7">Longitude (WGS84)</field>
        <field type="float" name="alt" units="m">Altitude (MSL)</field>
        <field type="float[3]" name="vel" units="m/s">target velocity (0,0,0) for unknown</field>
        <field type="float[3]" name="acc" units="m/s/s">linear target acceleration (0,0,0) for unknown</field>
        <field type="float[4]" name="attitude_q">(1 0 0 0 for unknown)</field>
        <field type="float[3]" name="rates">(0 0 0 for unknown)</field>
        <field type="float[3]" name="position_cov">eph epv</field>
        <field type="uint64_t" name="custom_state">button states or switches of a tracker device</field>
    </message>
    <message id="146" name="CONTROL_SYSTEM_STATE">
        <description>The smoothed, monotonic system state used to feed the control loops of the system.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="x_acc" units="m/s/s">X acceleration in body frame</field>
        <field type="float" name="y_acc" units="m/s/s">Y acceleration in body frame</field>
        <field type="float" name="z_acc" units="m/s/s">Z acceleration in body frame</field>
        <field type="float" name="x_vel" units="m/s">X velocity in body frame</field>
        <field type="float" name="y_vel" units="m/s">Y velocity in body frame</field>
        <field type="float" name="z_vel" units="m/s">Z velocity in body frame</field>
        <field type="float" name="x_pos" units="m">X position in local frame</field>
        <field type="float" name="y_pos" units="m">Y position in local frame</field>
        <field type="float" name="z_pos" units="m">Z position in local frame</field>
        <field type="float" name="airspeed" units="m/s">Airspeed, set to -1 if unknown</field>
        <field type="float[3]" name="vel_variance">Variance of body velocity estimate</field>
        <field type="float[3]" name="pos_variance">Variance in local position</field>
        <field type="float[4]" name="q">The attitude, represented as Quaternion</field>
        <field type="float" name="roll_rate" units="rad/s">Angular rate in roll axis</field>
        <field type="float" name="pitch_rate" units="rad/s">Angular rate in pitch axis</field>
        <field type="float" name="yaw_rate" units="rad/s">Angular rate in yaw axis</field>
    </message>
    <message id="147" name="BATTERY_STATUS">
        <description>Battery information. Updates GCS with flight controller battery status. Use SMART_BATTERY_* messages instead for smart batteries.</description>
        <field type="uint8_t" name="id">Battery ID</field>
        <field type="uint8_t" name="battery_function" enum="MAV_BATTERY_FUNCTION">Function of the battery</field>
        <field type="uint8_t" name="type" enum="MAV_BATTERY_TYPE">Type (chemistry) of the battery</field>
        <field type="int16_t" name="temperature" units="cdegC">Temperature of the battery. INT16_MAX for unknown temperature.</field>
        <field type="uint16_t[10]" name="voltages" units="mV">Battery voltage of cells. Cells above the valid cell count for this battery should have the UINT16_MAX value.</field>
        <field type="int16_t" name="current_battery" units="cA">Battery current, -1: autopilot does not measure the current</field>
        <field type="int32_t" name="current_consumed" units="mAh">Consumed charge, -1: autopilot does not provide consumption estimate</field>
        <field type="int32_t" name="energy_consumed" units="hJ">Consumed energy, -1: autopilot does not provide energy consumption estimate</field>
        <field type="int8_t" name="battery_remaining" units="%">Remaining battery energy. Values: [0-100], -1: autopilot does not estimate the remaining battery.</field>
        <extensions/>
        <field type="int32_t" name="time_remaining" units="s">Remaining battery time, 0: autopilot does not provide remaining battery time estimate</field>
        <field type="uint8_t" name="charge_state" enum="MAV_BATTERY_CHARGE_STATE">State for extent of discharge, provided by autopilot for warning or external reactions</field>
    </message>
    <message id="148" name="AUTOPILOT_VERSION">
        <description>Version and capability of autopilot software. This should be emitted in response to a MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES command.</description>
        <field type="uint64_t" name="capabilities" enum="MAV_PROTOCOL_CAPABILITY" display="bitmask">Bitmap of capabilities</field>
        <field type="uint32_t" name="flight_sw_version">Firmware version number</field>
        <field type="uint32_t" name="middleware_sw_version">Middleware version number</field>
        <field type="uint32_t" name="os_sw_version">Operating system version number</field>
        <field type="uint32_t" name="board_version">HW / board version (last 8 bytes should be silicon ID, if any)</field>
        <field type="uint8_t[8]" name="flight_custom_version">Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.</field>
        <field type="uint8_t[8]" name="middleware_custom_version">Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.</field>
        <field type="uint8_t[8]" name="os_custom_version">Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.</field>
        <field type="uint16_t" name="vendor_id">ID of the board vendor</field>
        <field type="uint16_t" name="product_id">ID of the product</field>
        <field type="uint64_t" name="uid">UID if provided by hardware (see uid2)</field>
        <extensions/>
        <field type="uint8_t[18]" name="uid2">UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid)</field>
    </message>
    <message id="149" name="LANDING_TARGET">
        <description>The location of a landing target. See: https://mavlink.io/en/services/landing_target.html</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="target_num">The ID of the target if multiple targets are present</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">Coordinate frame used for following fields.</field>
        <field type="float" name="angle_x" units="rad">X-axis angular offset of the target from the center of the image</field>
        <field type="float" name="angle_y" units="rad">Y-axis angular offset of the target from the center of the image</field>
        <field type="float" name="distance" units="m">Distance to the target from the vehicle</field>
        <field type="float" name="size_x" units="rad">Size of target along x-axis</field>
        <field type="float" name="size_y" units="rad">Size of target along y-axis</field>
        <extensions/>
        <field type="float" name="x" units="m">X Position of the landing target in MAV_FRAME</field>
        <field type="float" name="y" units="m">Y Position of the landing target in MAV_FRAME</field>
        <field type="float" name="z" units="m">Z Position of the landing target in MAV_FRAME</field>
        <field type="float[4]" name="q">Quaternion of landing target orientation (w, x, y, z order, zero-rotation is 1, 0, 0, 0)</field>
        <field type="uint8_t" name="type" enum="LANDING_TARGET_TYPE">Type of landing target</field>
        <field type="uint8_t" name="position_valid">Boolean indicating whether the position fields (x, y, z, q, type) contain valid target position information (valid: 1, invalid: 0). Default is 0 (invalid).</field>
    </message>
    <!-- imported from ardupilotmega.xml (2019) -->
    <message id="162" name="FENCE_STATUS">
        <description>Status of geo-fencing. Sent in extended status stream when fencing enabled.</description>
        <field type="uint8_t" name="breach_status">Breach status (0 if currently inside fence, 1 if outside).</field>
        <field type="uint16_t" name="breach_count">Number of fence breaches.</field>
        <field type="uint8_t" name="breach_type" enum="FENCE_BREACH">Last breach type.</field>
        <field type="uint32_t" name="breach_time" units="ms">Time (since boot) of last breach.</field>
        <extensions/>
        <field type="uint8_t" name="breach_mitigation" enum="FENCE_MITIGATE">Active action to prevent fence breach</field>
    </message>
    <!-- MESSAGE IDs 180 - 229: Space for custom messages in individual projectname_messages.xml files -->
    <message id="230" name="ESTIMATOR_STATUS">
        <description>Estimator status message including flags, innovation test ratios and estimated accuracies. The flags message is an integer bitmask containing information on which EKF outputs are valid. See the ESTIMATOR_STATUS_FLAGS enum definition for further information. The innovation test ratios show the magnitude of the sensor innovation divided by the innovation check threshold. Under normal operation the innovation test ratios should be below 0.5 with occasional values up to 1.0. Values greater than 1.0 should be rare under normal operation and indicate that a measurement has been rejected by the filter. The user should be notified if an innovation test ratio greater than 1.0 is recorded. Notifications for values in the range between 0.5 and 1.0 should be optional and controllable by the user.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint16_t" name="flags" enum="ESTIMATOR_STATUS_FLAGS" display="bitmask">Bitmap indicating which EKF outputs are valid.</field>
        <field type="float" name="vel_ratio">Velocity innovation test ratio</field>
        <field type="float" name="pos_horiz_ratio">Horizontal position innovation test ratio</field>
        <field type="float" name="pos_vert_ratio">Vertical position innovation test ratio</field>
        <field type="float" name="mag_ratio">Magnetometer innovation test ratio</field>
        <field type="float" name="hagl_ratio">Height above terrain innovation test ratio</field>
        <field type="float" name="tas_ratio">True airspeed innovation test ratio</field>
        <field type="float" name="pos_horiz_accuracy" units="m">Horizontal position 1-STD accuracy relative to the EKF local origin</field>
        <field type="float" name="pos_vert_accuracy" units="m">Vertical position 1-STD accuracy relative to the EKF local origin</field>
    </message>
    <message id="231" name="WIND_COV">
        <description>Wind covariance estimate from vehicle.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="wind_x" units="m/s">Wind in X (NED) direction</field>
        <field type="float" name="wind_y" units="m/s">Wind in Y (NED) direction</field>
        <field type="float" name="wind_z" units="m/s">Wind in Z (NED) direction</field>
        <field type="float" name="var_horiz" units="m/s">Variability of the wind in XY. RMS of a 1 Hz lowpassed wind estimate.</field>
        <field type="float" name="var_vert" units="m/s">Variability of the wind in Z. RMS of a 1 Hz lowpassed wind estimate.</field>
        <field type="float" name="wind_alt" units="m">Altitude (MSL) that this measurement was taken at</field>
        <field type="float" name="horiz_accuracy" units="m">Horizontal speed 1-STD accuracy</field>
        <field type="float" name="vert_accuracy" units="m">Vertical speed 1-STD accuracy</field>
    </message>
    <message id="232" name="GPS_INPUT">
        <description>GPS sensor input message.  This is a raw sensor value sent by the GPS. This is NOT the global position estimate of the system.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="gps_id">ID of the GPS for multiple GPS inputs</field>
        <field type="uint16_t" name="ignore_flags" enum="GPS_INPUT_IGNORE_FLAGS" display="bitmask">Bitmap indicating which GPS input flags fields to ignore.  All other fields must be provided.</field>
        <field type="uint32_t" name="time_week_ms" units="ms">GPS time (from start of GPS week)</field>
        <field type="uint16_t" name="time_week">GPS week number</field>
        <field type="uint8_t" name="fix_type">0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK</field>
        <field type="int32_t" name="lat" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="lon" units="degE7">Longitude (WGS84)</field>
        <field type="float" name="alt" units="m">Altitude (MSL). Positive for up.</field>
        <field type="float" name="hdop" units="m">GPS HDOP horizontal dilution of position</field>
        <field type="float" name="vdop" units="m">GPS VDOP vertical dilution of position</field>
        <field type="float" name="vn" units="m/s">GPS velocity in north direction in earth-fixed NED frame</field>
        <field type="float" name="ve" units="m/s">GPS velocity in east direction in earth-fixed NED frame</field>
        <field type="float" name="vd" units="m/s">GPS velocity in down direction in earth-fixed NED frame</field>
        <field type="float" name="speed_accuracy" units="m/s">GPS speed accuracy</field>
        <field type="float" name="horiz_accuracy" units="m">GPS horizontal accuracy</field>
        <field type="float" name="vert_accuracy" units="m">GPS vertical accuracy</field>
        <field type="uint8_t" name="satellites_visible">Number of satellites visible.</field>
        <extensions/>
        <field type="uint16_t" name="yaw" units="cdeg">Yaw of vehicle relative to Earth's North, zero means not available, use 36000 for north</field>
    </message>
    <message id="233" name="GPS_RTCM_DATA">
        <description>RTCM message for injecting into the onboard GPS (used for DGPS)</description>
        <field type="uint8_t" name="flags">LSB: 1 means message is fragmented, next 2 bits are the fragment ID, the remaining 5 bits are used for the sequence ID. Messages are only to be flushed to the GPS when the entire message has been reconstructed on the autopilot. The fragment ID specifies which order the fragments should be assembled into a buffer, while the sequence ID is used to detect a mismatch between different buffers. The buffer is considered fully reconstructed when either all 4 fragments are present, or all the fragments before the first fragment with a non full payload is received. This management is used to ensure that normal GPS operation doesn't corrupt RTCM data, and to recover from a unreliable transport delivery order.</field>
        <field type="uint8_t" name="len" units="bytes">data length</field>
        <field type="uint8_t[180]" name="data">RTCM message (may be fragmented)</field>
    </message>
    <message id="234" name="HIGH_LATENCY">
        <description>Message appropriate for high latency connections like Iridium</description>
        <field type="uint8_t" name="base_mode" enum="MAV_MODE_FLAG" display="bitmask">Bitmap of enabled system modes.</field>
        <field type="uint32_t" name="custom_mode" display="bitmask">A bitfield for use for autopilot-specific flags.</field>
        <field type="uint8_t" name="landed_state" enum="MAV_LANDED_STATE">The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.</field>
        <field type="int16_t" name="roll" units="cdeg">roll</field>
        <field type="int16_t" name="pitch" units="cdeg">pitch</field>
        <field type="uint16_t" name="heading" units="cdeg">heading</field>
        <field type="int8_t" name="throttle" units="%">throttle (percentage)</field>
        <field type="int16_t" name="heading_sp" units="cdeg">heading setpoint</field>
        <field type="int32_t" name="latitude" units="degE7">Latitude</field>
        <field type="int32_t" name="longitude" units="degE7">Longitude</field>
        <field type="int16_t" name="altitude_amsl" units="m">Altitude above mean sea level</field>
        <field type="int16_t" name="altitude_sp" units="m">Altitude setpoint relative to the home position</field>
        <field type="uint8_t" name="airspeed" units="m/s">airspeed</field>
        <field type="uint8_t" name="airspeed_sp" units="m/s">airspeed setpoint</field>
        <field type="uint8_t" name="groundspeed" units="m/s">groundspeed</field>
        <field type="int8_t" name="climb_rate" units="m/s">climb rate</field>
        <field type="uint8_t" name="gps_nsat">Number of satellites visible. If unknown, set to 255</field>
        <field type="uint8_t" name="gps_fix_type" enum="GPS_FIX_TYPE">GPS Fix type.</field>
        <field type="uint8_t" name="battery_remaining" units="%">Remaining battery (percentage)</field>
        <field type="int8_t" name="temperature" units="degC">Autopilot temperature (degrees C)</field>
        <field type="int8_t" name="temperature_air" units="degC">Air temperature (degrees C) from airspeed sensor</field>
        <field type="uint8_t" name="failsafe">failsafe (each bit represents a failsafe where 0=ok, 1=failsafe active (bit0:RC, bit1:batt, bit2:GPS, bit3:GCS, bit4:fence)</field>
        <field type="uint8_t" name="wp_num">current waypoint number</field>
        <field type="uint16_t" name="wp_distance" units="m">distance to target</field>
    </message>
    <message id="235" name="HIGH_LATENCY2">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Message appropriate for high latency connections like Iridium (version 2)</description>
        <field type="uint32_t" name="timestamp" units="ms">Timestamp (milliseconds since boot or Unix epoch)</field>
        <field type="uint8_t" name="type" enum="MAV_TYPE">Type of the MAV (quadrotor, helicopter, etc.)</field>
        <field type="uint8_t" name="autopilot" enum="MAV_AUTOPILOT">Autopilot type / class. Use MAV_AUTOPILOT_INVALID for components that are not flight controllers.</field>
        <field type="uint16_t" name="custom_mode" display="bitmask">A bitfield for use for autopilot-specific flags (2 byte version).</field>
        <field type="int32_t" name="latitude" units="degE7">Latitude</field>
        <field type="int32_t" name="longitude" units="degE7">Longitude</field>
        <field type="int16_t" name="altitude" units="m">Altitude above mean sea level</field>
        <field type="int16_t" name="target_altitude" units="m">Altitude setpoint</field>
        <field type="uint8_t" name="heading" units="deg/2">Heading</field>
        <field type="uint8_t" name="target_heading" units="deg/2">Heading setpoint</field>
        <field type="uint16_t" name="target_distance" units="dam">Distance to target waypoint or position</field>
        <field type="uint8_t" name="throttle" units="%">Throttle</field>
        <field type="uint8_t" name="airspeed" units="m/s*5">Airspeed</field>
        <field type="uint8_t" name="airspeed_sp" units="m/s*5">Airspeed setpoint</field>
        <field type="uint8_t" name="groundspeed" units="m/s*5">Groundspeed</field>
        <field type="uint8_t" name="windspeed" units="m/s*5">Windspeed</field>
        <field type="uint8_t" name="wind_heading" units="deg/2">Wind heading</field>
        <field type="uint8_t" name="eph" units="dm">Maximum error horizontal position since last message</field>
        <field type="uint8_t" name="epv" units="dm">Maximum error vertical position since last message</field>
        <field type="int8_t" name="temperature_air" units="degC">Air temperature from airspeed sensor</field>
        <field type="int8_t" name="climb_rate" units="dm/s">Maximum climb rate magnitude since last message</field>
        <field type="int8_t" name="battery" units="%">Battery level (-1 if field not provided).</field>
        <field type="uint16_t" name="wp_num">Current waypoint number</field>
        <field type="uint16_t" name="failure_flags" enum="HL_FAILURE_FLAG" display="bitmask">Bitmap of failure flags.</field>
        <field type="int8_t" name="custom0">Field for custom payload.</field>
        <field type="int8_t" name="custom1">Field for custom payload.</field>
        <field type="int8_t" name="custom2">Field for custom payload.</field>
    </message>
    <message id="241" name="VIBRATION">
        <description>Vibration levels and accelerometer clipping</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="vibration_x">Vibration levels on X-axis</field>
        <field type="float" name="vibration_y">Vibration levels on Y-axis</field>
        <field type="float" name="vibration_z">Vibration levels on Z-axis</field>
        <field type="uint32_t" name="clipping_0">first accelerometer clipping count</field>
        <field type="uint32_t" name="clipping_1">second accelerometer clipping count</field>
        <field type="uint32_t" name="clipping_2">third accelerometer clipping count</field>
    </message>
    <message id="242" name="HOME_POSITION">
        <description>This message can be requested by sending the MAV_CMD_GET_HOME_POSITION command. The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The position the system will return to and land on. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.</description>
        <field type="int32_t" name="latitude" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="longitude" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="altitude" units="mm">Altitude (MSL). Positive for up.</field>
        <field type="float" name="x" units="m">Local X position of this position in the local coordinate frame</field>
        <field type="float" name="y" units="m">Local Y position of this position in the local coordinate frame</field>
        <field type="float" name="z" units="m">Local Z position of this position in the local coordinate frame</field>
        <field type="float[4]" name="q">World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground</field>
        <field type="float" name="approach_x" units="m">Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.</field>
        <field type="float" name="approach_y" units="m">Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.</field>
        <field type="float" name="approach_z" units="m">Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.</field>
        <extensions/>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
    </message>
    <message id="243" name="SET_HOME_POSITION">
        <description>The position the system will return to and land on. The position is set automatically by the system during the takeoff in case it was not explicitly set by the operator before or after. The global and local positions encode the position in the respective coordinate frames, while the q parameter encodes the orientation of the surface. Under normal conditions it describes the heading and terrain slope, which can be used by the aircraft to adjust the approach. The approach 3D vector describes the point to which the system should fly in normal flight mode and then perform a landing sequence along the vector.</description>
        <field type="uint8_t" name="target_system">System ID.</field>
        <field type="int32_t" name="latitude" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="longitude" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="altitude" units="mm">Altitude (MSL). Positive for up.</field>
        <field type="float" name="x" units="m">Local X position of this position in the local coordinate frame</field>
        <field type="float" name="y" units="m">Local Y position of this position in the local coordinate frame</field>
        <field type="float" name="z" units="m">Local Z position of this position in the local coordinate frame</field>
        <field type="float[4]" name="q">World to surface normal and heading transformation of the takeoff position. Used to indicate the heading and slope of the ground</field>
        <field type="float" name="approach_x" units="m">Local X position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.</field>
        <field type="float" name="approach_y" units="m">Local Y position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.</field>
        <field type="float" name="approach_z" units="m">Local Z position of the end of the approach vector. Multicopters should set this position based on their takeoff path. Grass-landing fixed wing aircraft should set it the same way as multicopters. Runway-landing fixed wing aircraft should set it to the opposite direction of the takeoff, assuming the takeoff happened from the threshold / touchdown zone.</field>
        <extensions/>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
    </message>
    <message id="244" name="MESSAGE_INTERVAL">
        <description>The interval between messages for a particular MAVLink message ID. This message is the response to the MAV_CMD_GET_MESSAGE_INTERVAL command. This interface replaces DATA_STREAM.</description>
        <field type="uint16_t" name="message_id">The ID of the requested MAVLink message. v1.0 is limited to 254 messages.</field>
        <field type="int32_t" name="interval_us" units="us">The interval between two messages. A value of -1 indicates this stream is disabled, 0 indicates it is not available, &gt; 0 indicates the interval at which it is sent.</field>
    </message>
    <message id="245" name="EXTENDED_SYS_STATE">
        <description>Provides state for additional features</description>
        <field type="uint8_t" name="vtol_state" enum="MAV_VTOL_STATE">The VTOL state if applicable. Is set to MAV_VTOL_STATE_UNDEFINED if UAV is not in VTOL configuration.</field>
        <field type="uint8_t" name="landed_state" enum="MAV_LANDED_STATE">The landed state. Is set to MAV_LANDED_STATE_UNDEFINED if landed state is unknown.</field>
    </message>
    <message id="246" name="ADSB_VEHICLE">
        <description>The location and information of an ADSB vehicle</description>
        <field type="uint32_t" name="ICAO_address">ICAO address</field>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
        <field type="uint8_t" name="altitude_type" enum="ADSB_ALTITUDE_TYPE">ADSB altitude type.</field>
        <field type="int32_t" name="altitude" units="mm">Altitude(ASL)</field>
        <field type="uint16_t" name="heading" units="cdeg">Course over ground</field>
        <field type="uint16_t" name="hor_velocity" units="cm/s">The horizontal velocity</field>
        <field type="int16_t" name="ver_velocity" units="cm/s">The vertical velocity. Positive is up</field>
        <field type="char[9]" name="callsign">The callsign, 8+null</field>
        <field type="uint8_t" name="emitter_type" enum="ADSB_EMITTER_TYPE">ADSB emitter type.</field>
        <field type="uint8_t" name="tslc" units="s">Time since last communication in seconds</field>
        <field type="uint16_t" name="flags" enum="ADSB_FLAGS" display="bitmask">Bitmap to indicate various statuses including valid data fields</field>
        <field type="uint16_t" name="squawk">Squawk code</field>
    </message>
    <message id="247" name="COLLISION">
        <description>Information about a potential collision</description>
        <field type="uint8_t" name="src" enum="MAV_COLLISION_SRC">Collision data source</field>
        <field type="uint32_t" name="id">Unique identifier, domain based on src field</field>
        <field type="uint8_t" name="action" enum="MAV_COLLISION_ACTION">Action that is being taken to avoid this collision</field>
        <field type="uint8_t" name="threat_level" enum="MAV_COLLISION_THREAT_LEVEL">How concerned the aircraft is about this collision</field>
        <field type="float" name="time_to_minimum_delta" units="s">Estimated time until collision occurs</field>
        <field type="float" name="altitude_minimum_delta" units="m">Closest vertical distance between vehicle and object</field>
        <field type="float" name="horizontal_minimum_delta" units="m">Closest horizontal distance between vehicle and object</field>
    </message>
    <message id="248" name="V2_EXTENSION">
        <description>Message implementing parts of the V2 payload specs in V1 frames for transitional support.</description>
        <field type="uint8_t" name="target_network">Network ID (0 for broadcast)</field>
        <field type="uint8_t" name="target_system">System ID (0 for broadcast)</field>
        <field type="uint8_t" name="target_component">Component ID (0 for broadcast)</field>
        <field type="uint16_t" name="message_type">A code that identifies the software component that understands this message (analogous to USB device classes or mime type strings). If this code is less than 32768, it is considered a 'registered' protocol extension and the corresponding entry should be added to https://github.com/mavlink/mavlink/definition_files/extension_message_ids.xml. Software creators can register blocks of message IDs as needed (useful for GCS specific metadata, etc...). Message_types greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.</field>
        <field type="uint8_t[249]" name="payload">Variable length payload. The length must be encoded in the payload as part of the message_type protocol, e.g. by including the length as payload data, or by terminating the payload data with a non-zero marker. This is required in order to reconstruct zero-terminated payloads that are (or otherwise would be) trimmed by MAVLink 2 empty-byte truncation. The entire content of the payload block is opaque unless you understand the encoding message_type. The particular encoding used can be extension specific and might not always be documented as part of the MAVLink specification.</field>
    </message>
    <message id="249" name="MEMORY_VECT">
        <description>Send raw controller memory. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
        <field type="uint16_t" name="address">Starting address of the debug variables</field>
        <field type="uint8_t" name="ver">Version code of the type variable. 0=unknown, type ignored and assumed int16_t. 1=as below</field>
        <field type="uint8_t" name="type">Type code of the memory variables. for ver = 1: 0=16 x int16_t, 1=16 x uint16_t, 2=16 x Q15, 3=16 x 1Q14</field>
        <field type="int8_t[32]" name="value">Memory contents at specified address</field>
    </message>
    <message id="250" name="DEBUG_VECT">
        <description>To debug something using a named 3D vector.</description>
        <field type="char[10]" name="name">Name</field>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="x">x</field>
        <field type="float" name="y">y</field>
        <field type="float" name="z">z</field>
    </message>
    <message id="251" name="NAMED_VALUE_FLOAT">
        <description>Send a key-value pair as float. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="char[10]" name="name">Name of the debug variable</field>
        <field type="float" name="value">Floating point value</field>
    </message>
    <message id="252" name="NAMED_VALUE_INT">
        <description>Send a key-value pair as integer. The use of this message is discouraged for normal packets, but a quite efficient way for testing new messages and getting experimental debug output.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="char[10]" name="name">Name of the debug variable</field>
        <field type="int32_t" name="value">Signed integer value</field>
    </message>
    <message id="253" name="STATUSTEXT">
        <description>Status text message. These messages are printed in yellow in the COMM console of QGroundControl. WARNING: They consume quite some bandwidth, so use only for important status and error messages. If implemented wisely, these messages are buffered on the MCU and sent only at a limited rate (e.g. 10 Hz).</description>
        <field type="uint8_t" name="severity" enum="MAV_SEVERITY">Severity of status. Relies on the definitions within RFC-5424.</field>
        <field type="char[50]" name="text">Status text message, without null termination character</field>
    </message>
    <message id="254" name="DEBUG">
        <description>Send a debug value. The index is used to discriminate between values. These values show up in the plot of QGroundControl as DEBUG N.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="ind">index of debug variable</field>
        <field type="float" name="value">DEBUG value</field>
    </message>
    <!-- messages with ID 256 and above are only available in MAVLink2 -->
    <message id="256" name="SETUP_SIGNING">
        <description>Setup a MAVLink2 signing key. If called with secret_key of all zero and zero initial_timestamp will disable signing</description>
        <field type="uint8_t" name="target_system">system id of the target</field>
        <field type="uint8_t" name="target_component">component ID of the target</field>
        <field type="uint8_t[32]" name="secret_key">signing key</field>
        <field type="uint64_t" name="initial_timestamp">initial timestamp</field>
    </message>
    <message id="257" name="BUTTON_CHANGE">
        <description>Report button state change.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint32_t" name="last_change_ms" units="ms">Time of last change of button state.</field>
        <field type="uint8_t" name="state" display="bitmask">Bitmap for state of buttons.</field>
    </message>
    <message id="258" name="PLAY_TUNE">
        <deprecated since="2019-10" replaced_by="PLAY_TUNE_V2">New version explicitly defines format. More interoperable.</deprecated>
        <description>Control vehicle tone generation (buzzer).</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="char[30]" name="tune">tune in board specific format</field>
        <extensions/>
        <field type="char[200]" name="tune2">tune extension (appended to tune)</field>
    </message>
    <message id="259" name="CAMERA_INFORMATION">
        <description>Information about a camera</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t[32]" name="vendor_name">Name of the camera vendor</field>
        <field type="uint8_t[32]" name="model_name">Name of the camera model</field>
        <field type="uint32_t" name="firmware_version">Version of the camera firmware (v &lt;&lt; 24 &amp; 0xff = Dev, v &lt;&lt; 16 &amp; 0xff = Patch, v &lt;&lt; 8 &amp; 0xff = Minor, v &amp; 0xff = Major)</field>
        <field type="float" name="focal_length" units="mm">Focal length</field>
        <field type="float" name="sensor_size_h" units="mm">Image sensor size horizontal</field>
        <field type="float" name="sensor_size_v" units="mm">Image sensor size vertical</field>
        <field type="uint16_t" name="resolution_h" units="pix">Horizontal image resolution</field>
        <field type="uint16_t" name="resolution_v" units="pix">Vertical image resolution</field>
        <field type="uint8_t" name="lens_id">Reserved for a lens ID</field>
        <field type="uint32_t" name="flags" enum="CAMERA_CAP_FLAGS" display="bitmask">Bitmap of camera capability flags.</field>
        <field type="uint16_t" name="cam_definition_version">Camera definition version (iteration)</field>
        <field type="char[140]" name="cam_definition_uri">Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol).</field>
    </message>
    <message id="260" name="CAMERA_SETTINGS">
        <description>Settings of a camera, can be requested using MAV_CMD_REQUEST_CAMERA_SETTINGS.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="mode_id" enum="CAMERA_MODE">Camera mode</field>
        <extensions/>
        <field type="float" name="zoomLevel">Current zoom level (0.0 to 100.0, NaN if not known)</field>
        <field type="float" name="focusLevel">Current focus level (0.0 to 100.0, NaN if not known)</field>
    </message>
    <message id="261" name="STORAGE_INFORMATION">
        <description>Information about a storage medium. This message is sent in response to a request and whenever the status of the storage changes (STORAGE_STATUS).</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="storage_id">Storage ID (1 for first, 2 for second, etc.)</field>
        <field type="uint8_t" name="storage_count">Number of storage devices</field>
        <field type="uint8_t" name="status" enum="STORAGE_STATUS">Status of storage</field>
        <field type="float" name="total_capacity" units="MiB">Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.</field>
        <field type="float" name="used_capacity" units="MiB">Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.</field>
        <field type="float" name="available_capacity" units="MiB">Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.</field>
        <field type="float" name="read_speed" units="MiB/s">Read speed.</field>
        <field type="float" name="write_speed" units="MiB/s">Write speed.</field>
    </message>
    <message id="262" name="CAMERA_CAPTURE_STATUS">
        <description>Information about the status of a capture.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint8_t" name="image_status">Current status of image capturing (0: idle, 1: capture in progress, 2: interval set but idle, 3: interval set and capture in progress)</field>
        <field type="uint8_t" name="video_status">Current status of video capturing (0: idle, 1: capture in progress)</field>
        <field type="float" name="image_interval" units="s">Image capture interval</field>
        <field type="uint32_t" name="recording_time_ms" units="ms">Time since recording started</field>
        <field type="float" name="available_capacity" units="MiB">Available storage capacity.</field>
    </message>
    <message id="263" name="CAMERA_IMAGE_CAPTURED">
        <description>Information about a captured image</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint64_t" name="time_utc" units="us">Timestamp (time since UNIX epoch) in UTC. 0 for unknown.</field>
        <field type="uint8_t" name="camera_id">Camera ID (1 for first, 2 for second, etc.)</field>
        <field type="int32_t" name="lat" units="degE7">Latitude where image was taken</field>
        <field type="int32_t" name="lon" units="degE7">Longitude where capture was taken</field>
        <field type="int32_t" name="alt" units="mm">Altitude (MSL) where image was taken</field>
        <field type="int32_t" name="relative_alt" units="mm">Altitude above ground</field>
        <field type="float[4]" name="q">Quaternion of camera orientation (w, x, y, z order, zero-rotation is 0, 0, 0, 0)</field>
        <field type="int32_t" name="image_index">Zero based index of this image (image count since armed -1)</field>
        <field type="int8_t" name="capture_result">Boolean indicating success (1) or failure (0) while capturing this image.</field>
        <field type="char[205]" name="file_url">URL of image taken. Either local storage or http://foo.jpg if camera provides an HTTP interface.</field>
    </message>
    <message id="264" name="FLIGHT_INFORMATION">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Information about flight since last arming.</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="uint64_t" name="arming_time_utc" units="us">Timestamp at arming (time since UNIX epoch) in UTC, 0 for unknown</field>
        <field type="uint64_t" name="takeoff_time_utc" units="us">Timestamp at takeoff (time since UNIX epoch) in UTC, 0 for unknown</field>
        <field type="uint64_t" name="flight_uuid">Universally unique identifier (UUID) of flight, should correspond to name of log files</field>
    </message>
    <message id="265" name="MOUNT_ORIENTATION">
        <description>Orientation of a mount</description>
        <field type="uint32_t" name="time_boot_ms" units="ms">Timestamp (time since system boot).</field>
        <field type="float" name="roll" units="deg">Roll in global frame (set to NaN for invalid).</field>
        <field type="float" name="pitch" units="deg">Pitch in global frame (set to NaN for invalid).</field>
        <field type="float" name="yaw" units="deg">Yaw relative to vehicle (set to NaN for invalid).</field>
        <extensions/>
        <field type="float" name="yaw_absolute" units="deg">Yaw in absolute frame relative to Earth's North, north is 0 (set to NaN for invalid).</field>
    </message>
    <message id="266" name="LOGGING_DATA">
        <description>A message containing logged data (see also MAV_CMD_LOGGING_START)</description>
        <field type="uint8_t" name="target_system">system ID of the target</field>
        <field type="uint8_t" name="target_component">component ID of the target</field>
        <field type="uint16_t" name="sequence">sequence number (can wrap)</field>
        <field type="uint8_t" name="length" units="bytes">data length</field>
        <field type="uint8_t" name="first_message_offset" units="bytes">offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists).</field>
        <field type="uint8_t[249]" name="data">logged data</field>
    </message>
    <message id="267" name="LOGGING_DATA_ACKED">
        <description>A message containing logged data which requires a LOGGING_ACK to be sent back</description>
        <field type="uint8_t" name="target_system">system ID of the target</field>
        <field type="uint8_t" name="target_component">component ID of the target</field>
        <field type="uint16_t" name="sequence">sequence number (can wrap)</field>
        <field type="uint8_t" name="length" units="bytes">data length</field>
        <field type="uint8_t" name="first_message_offset" units="bytes">offset into data where first message starts. This can be used for recovery, when a previous message got lost (set to 255 if no start exists).</field>
        <field type="uint8_t[249]" name="data">logged data</field>
    </message>
    <message id="268" name="LOGGING_ACK">
        <description>An ack for a LOGGING_DATA_ACKED message</description>
        <field type="uint8_t" name="target_system">system ID of the target</field>
        <field type="uint8_t" name="target_component">component ID of the target</field>
        <field type="uint16_t" name="sequence">sequence number (must match the one in LOGGING_DATA_ACKED)</field>
    </message>
    <message id="269" name="VIDEO_STREAM_INFORMATION">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Information about video stream</description>
        <field type="uint8_t" name="stream_id">Video Stream ID (1 for first, 2 for second, etc.)</field>
        <field type="uint8_t" name="count">Number of streams available.</field>
        <field type="uint8_t" name="type" enum="VIDEO_STREAM_TYPE">Type of stream.</field>
        <field type="uint16_t" name="flags" enum="VIDEO_STREAM_STATUS_FLAGS">Bitmap of stream status flags.</field>
        <field type="float" name="framerate" units="Hz">Frame rate.</field>
        <field type="uint16_t" name="resolution_h" units="pix">Horizontal resolution.</field>
        <field type="uint16_t" name="resolution_v" units="pix">Vertical resolution.</field>
        <field type="uint32_t" name="bitrate" units="bits/s">Bit rate.</field>
        <field type="uint16_t" name="rotation" units="deg">Video image rotation clockwise.</field>
        <field type="uint16_t" name="hfov" units="deg">Horizontal Field of view.</field>
        <field type="char[32]" name="name">Stream name.</field>
        <field type="char[160]" name="uri">Video stream URI (TCP or RTSP URI ground station should connect to) or port number (UDP port ground station should listen to).</field>
    </message>
    <message id="270" name="VIDEO_STREAM_STATUS">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Information about the status of a video stream.</description>
        <field type="uint8_t" name="stream_id">Video Stream ID (1 for first, 2 for second, etc.)</field>
        <field type="uint16_t" name="flags" enum="VIDEO_STREAM_STATUS_FLAGS">Bitmap of stream status flags</field>
        <field type="float" name="framerate" units="Hz">Frame rate</field>
        <field type="uint16_t" name="resolution_h" units="pix">Horizontal resolution</field>
        <field type="uint16_t" name="resolution_v" units="pix">Vertical resolution</field>
        <field type="uint32_t" name="bitrate" units="bits/s">Bit rate</field>
        <field type="uint16_t" name="rotation" units="deg">Video image rotation clockwise</field>
        <field type="uint16_t" name="hfov" units="deg">Horizontal Field of view</field>
    </message>
    <message id="299" name="WIFI_CONFIG_AP">
        <description>Configure AP SSID and Password.</description>
        <field type="char[32]" name="ssid">Name of Wi-Fi network (SSID). Leave it blank to leave it unchanged.</field>
        <field type="char[64]" name="password">Password. Leave it blank for an open AP.</field>
    </message>
    <message id="300" name="PROTOCOL_VERSION">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Version and capability of protocol version. This message is the response to REQUEST_PROTOCOL_VERSION and is used as part of the handshaking to establish which MAVLink version should be used on the network. Every node should respond to REQUEST_PROTOCOL_VERSION to enable the handshaking. Library implementers should consider adding this into the default decoding state machine to allow the protocol core to respond directly.</description>
        <field type="uint16_t" name="version">Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.</field>
        <field type="uint16_t" name="min_version">Minimum MAVLink version supported</field>
        <field type="uint16_t" name="max_version">Maximum MAVLink version supported (set to the same value as version by default)</field>
        <field type="uint8_t[8]" name="spec_version_hash">The first 8 bytes (not characters printed in hex!) of the git hash.</field>
        <field type="uint8_t[8]" name="library_version_hash">The first 8 bytes (not characters printed in hex!) of the git hash.</field>
    </message>
    <message id="301" name="AIS_VESSEL">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>The location and information of an AIS vessel</description>
        <field type="uint32_t" name="MMSI">Mobile Marine Service Identifier, 9 decimal digits</field>
        <field type="int32_t" name="lat" units="degE7">Latitude</field>
        <field type="int32_t" name="lon" units="degE7">Longitude</field>
        <field type="uint16_t" name="COG" units="cdeg">Course over ground</field>
        <field type="uint16_t" name="heading" units="cdeg">True heading</field>
        <field type="uint16_t" name="velocity" units="cm/s">Speed over ground</field>
        <field type="int8_t" name="turn_rate" units="cdeg/s">Turn rate</field>
        <field type="uint8_t" name="navigational_status" enum="AIS_NAV_STATUS">Navigational status</field>
        <field type="uint8_t" name="type" enum="AIS_TYPE">Type of vessels</field>
        <field type="uint16_t" name="dimension_bow" units="m">Distance from lat/lon location to bow</field>
        <field type="uint16_t" name="dimension_stern" units="m">Distance from lat/lon location to stern</field>
        <field type="uint8_t" name="dimension_port" units="m">Distance from lat/lon location to port side</field>
        <field type="uint8_t" name="dimension_starboard" units="m">Distance from lat/lon location to starboard side</field>
        <field type="char[7]" name="callsign">The vessel callsign</field>
        <field type="char[20]" name="name">The vessel name</field>
        <field type="uint16_t" name="tslc" units="s">Time since last communication in seconds</field>
        <field type="uint16_t" name="flags" enum="AIS_FLAGS" display="bitmask">Bitmask to indicate various statuses including valid data fields</field>
    </message>
    <!-- UAVCAN related messages. Please keep the range [310, 320) reserved for UAVCAN. -->
    <message id="310" name="UAVCAN_NODE_STATUS">
        <description>General status information of an UAVCAN node. Please refer to the definition of the UAVCAN message "uavcan.protocol.NodeStatus" for the background information. The UAVCAN specification is available at http://uavcan.org.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint32_t" name="uptime_sec" units="s">Time since the start-up of the node.</field>
        <field type="uint8_t" name="health" enum="UAVCAN_NODE_HEALTH">Generalized node health status.</field>
        <field type="uint8_t" name="mode" enum="UAVCAN_NODE_MODE">Generalized operating mode.</field>
        <field type="uint8_t" name="sub_mode">Not used currently.</field>
        <field type="uint16_t" name="vendor_specific_status_code">Vendor-specific status information.</field>
    </message>
    <message id="311" name="UAVCAN_NODE_INFO">
        <description>General information describing a particular UAVCAN node. Please refer to the definition of the UAVCAN service "uavcan.protocol.GetNodeInfo" for the background information. This message should be emitted by the system whenever a new node appears online, or an existing node reboots. Additionally, it can be emitted upon request from the other end of the MAVLink channel (see MAV_CMD_UAVCAN_GET_NODE_INFO). It is also not prohibited to emit this message unconditionally at a low frequency. The UAVCAN specification is available at http://uavcan.org.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint32_t" name="uptime_sec" units="s">Time since the start-up of the node.</field>
        <field type="char[80]" name="name">Node name string. For example, "sapog.px4.io".</field>
        <field type="uint8_t" name="hw_version_major">Hardware major version number.</field>
        <field type="uint8_t" name="hw_version_minor">Hardware minor version number.</field>
        <field type="uint8_t[16]" name="hw_unique_id">Hardware unique 128-bit ID.</field>
        <field type="uint8_t" name="sw_version_major">Software major version number.</field>
        <field type="uint8_t" name="sw_version_minor">Software minor version number.</field>
        <field type="uint32_t" name="sw_vcs_commit">Version control system (VCS) revision identifier (e.g. git short commit hash). Zero if unknown.</field>
    </message>
    <message id="320" name="PARAM_EXT_REQUEST_READ">
        <description>Request to read the value of a parameter with the either the param_id string id or param_index.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="char[16]" name="param_id">Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="int16_t" name="param_index">Parameter index. Set to -1 to use the Parameter ID field as identifier (else param_id will be ignored)</field>
    </message>
    <message id="321" name="PARAM_EXT_REQUEST_LIST">
        <description>Request all parameters of this component. After this request, all parameters are emitted.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
    </message>
    <message id="322" name="PARAM_EXT_VALUE">
        <description>Emit the value of a parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows them to re-request missing parameters after a loss or timeout.</description>
        <field type="char[16]" name="param_id">Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="char[128]" name="param_value">Parameter value</field>
        <field type="uint8_t" name="param_type" enum="MAV_PARAM_EXT_TYPE">Parameter type.</field>
        <field type="uint16_t" name="param_count">Total number of parameters</field>
        <field type="uint16_t" name="param_index">Index of this parameter</field>
    </message>
    <message id="323" name="PARAM_EXT_SET">
        <description>Set a parameter value. In order to deal with message loss (and retransmission of PARAM_EXT_SET), when setting a parameter value and the new value is the same as the current value, you will immediately get a PARAM_ACK_ACCEPTED response. If the current state is PARAM_ACK_IN_PROGRESS, you will accordingly receive a PARAM_ACK_IN_PROGRESS in response.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="char[16]" name="param_id">Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="char[128]" name="param_value">Parameter value</field>
        <field type="uint8_t" name="param_type" enum="MAV_PARAM_EXT_TYPE">Parameter type.</field>
    </message>
    <message id="324" name="PARAM_EXT_ACK">
        <description>Response from a PARAM_EXT_SET message.</description>
        <field type="char[16]" name="param_id">Parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string</field>
        <field type="char[128]" name="param_value">Parameter value (new value if PARAM_ACK_ACCEPTED, current value otherwise)</field>
        <field type="uint8_t" name="param_type" enum="MAV_PARAM_EXT_TYPE">Parameter type.</field>
        <field type="uint8_t" name="param_result" enum="PARAM_ACK">Result code.</field>
    </message>
    <message id="330" name="OBSTACLE_DISTANCE">
        <description>Obstacle distances in front of the sensor, starting from the left in increment degrees to the right</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="sensor_type" enum="MAV_DISTANCE_SENSOR">Class id of the distance sensor type.</field>
        <field type="uint16_t[72]" name="distances" units="cm">Distance of obstacles around the vehicle with index 0 corresponding to north + angle_offset, unless otherwise specified in the frame. A value of 0 is valid and means that the obstacle is practically touching the sensor. A value of max_distance +1 means no obstacle is present. A value of UINT16_MAX for unknown/not used. In a array element, one unit corresponds to 1cm.</field>
        <field type="uint8_t" name="increment" units="deg">Angular width in degrees of each array element. Increment direction is clockwise. This field is ignored if increment_f is non-zero.</field>
        <field type="uint16_t" name="min_distance" units="cm">Minimum distance the sensor can measure.</field>
        <field type="uint16_t" name="max_distance" units="cm">Maximum distance the sensor can measure.</field>
        <extensions/>
        <field type="float" name="increment_f" units="deg">Angular width in degrees of each array element as a float. If non-zero then this value is used instead of the uint8_t increment field. Positive is clockwise direction, negative is counter-clockwise.</field>
        <field type="float" name="angle_offset" units="deg">Relative angle offset of the 0-index element in the distances array. Value of 0 corresponds to forward. Positive is clockwise direction, negative is counter-clockwise.</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">Coordinate frame of reference for the yaw rotation and offset of the sensor data. Defaults to MAV_FRAME_GLOBAL, which is north aligned. For body-mounted sensors use MAV_FRAME_BODY_FRD, which is vehicle front aligned.</field>
    </message>
    <message id="331" name="ODOMETRY">
        <description>Odometry message to communicate odometry information with an external interface. Fits ROS REP 147 standard for aerial vehicles (http://www.ros.org/reps/rep-0147.html).</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="frame_id" enum="MAV_FRAME">Coordinate frame of reference for the pose data.</field>
        <field type="uint8_t" name="child_frame_id" enum="MAV_FRAME">Coordinate frame of reference for the velocity in free space (twist) data.</field>
        <field type="float" name="x" units="m">X Position</field>
        <field type="float" name="y" units="m">Y Position</field>
        <field type="float" name="z" units="m">Z Position</field>
        <field type="float[4]" name="q">Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation)</field>
        <field type="float" name="vx" units="m/s">X linear speed</field>
        <field type="float" name="vy" units="m/s">Y linear speed</field>
        <field type="float" name="vz" units="m/s">Z linear speed</field>
        <field type="float" name="rollspeed" units="rad/s">Roll angular speed</field>
        <field type="float" name="pitchspeed" units="rad/s">Pitch angular speed</field>
        <field type="float" name="yawspeed" units="rad/s">Yaw angular speed</field>
        <field type="float[21]" name="pose_covariance">Row-major representation of a 6x6 pose cross-covariance matrix upper right triangle (states: x, y, z, roll, pitch, yaw; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.</field>
        <field type="float[21]" name="velocity_covariance">Row-major representation of a 6x6 velocity cross-covariance matrix upper right triangle (states: vx, vy, vz, rollspeed, pitchspeed, yawspeed; first six entries are the first ROW, next five entries are the second ROW, etc.). If unknown, assign NaN value to first element in the array.</field>
        <extensions/>
        <field type="uint8_t" name="reset_counter">Estimate reset counter. This should be incremented when the estimate resets in any of the dimensions (position, velocity, attitude, angular speed). This is designed to be used when e.g an external SLAM system detects a loop-closure and the estimate jumps.</field>
        <field type="uint8_t" name="estimator_type" enum="MAV_ESTIMATOR_TYPE">Type of estimator that is providing the odometry.</field>
    </message>
    <message id="332" name="TRAJECTORY_REPRESENTATION_WAYPOINTS">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Describe a trajectory using an array of up-to 5 waypoints in the local frame.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="valid_points">Number of valid points (up-to 5 waypoints are possible)</field>
        <field type="float[5]" name="pos_x" units="m">X-coordinate of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="pos_y" units="m">Y-coordinate of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="pos_z" units="m">Z-coordinate of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="vel_x" units="m/s">X-velocity of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="vel_y" units="m/s">Y-velocity of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="vel_z" units="m/s">Z-velocity of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="acc_x" units="m/s/s">X-acceleration of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="acc_y" units="m/s/s">Y-acceleration of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="acc_z" units="m/s/s">Z-acceleration of waypoint, set to NaN if not being used</field>
        <field type="float[5]" name="pos_yaw" units="rad">Yaw angle, set to NaN if not being used</field>
        <field type="float[5]" name="vel_yaw" units="rad/s">Yaw rate, set to NaN if not being used</field>
        <field type="uint16_t[5]" name="command" enum="MAV_CMD">Scheduled action for each waypoint, UINT16_MAX if not being used.</field>
    </message>
    <message id="333" name="TRAJECTORY_REPRESENTATION_BEZIER">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Describe a trajectory using an array of up-to 5 bezier points in the local frame.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint8_t" name="valid_points">Number of valid points (up-to 5 waypoints are possible)</field>
        <field type="float[5]" name="pos_x" units="m">X-coordinate of starting bezier point, set to NaN if not being used</field>
        <field type="float[5]" name="pos_y" units="m">Y-coordinate of starting bezier point, set to NaN if not being used</field>
        <field type="float[5]" name="pos_z" units="m">Z-coordinate of starting bezier point, set to NaN if not being used</field>
        <field type="float[5]" name="delta" units="s">Bezier time horizon, set to NaN if velocity/acceleration should not be incorporated</field>
        <field type="float[5]" name="pos_yaw" units="rad">Yaw, set to NaN for unchanged</field>
    </message>
    <message id="334" name="CELLULAR_STATUS">
        <wip/>
        <description>Report current used cellular network status</description>
        <field type="uint16_t" name="status" enum="CELLULAR_NETWORK_STATUS_FLAG" display="bitmask">Status bitmap</field>
        <field type="uint8_t" name="type" enum="CELLULAR_NETWORK_RADIO_TYPE">Cellular network radio type: gsm, cdma, lte...</field>
        <field type="uint8_t" name="quality">Cellular network RSSI/RSRP in dBm, absolute value</field>
        <field type="uint16_t" name="mcc">Mobile country code. If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="mnc">Mobile network code. If unknown, set to: UINT16_MAX</field>
        <field type="uint16_t" name="lac">Location area code. If unknown, set to: 0</field>
        <field type="uint32_t" name="cid">Cell ID. If unknown, set to: UINT32_MAX</field>
    </message>
    <message id="335" name="ISBD_LINK_STATUS">
        <description>Status of the Iridium SBD link.</description>
        <field type="uint64_t" name="timestamp" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint64_t" name="last_heartbeat" units="us">Timestamp of the last successful sbd session. The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint16_t" name="failed_sessions">Number of failed SBD sessions.</field>
        <field type="uint16_t" name="successful_sessions">Number of successful SBD sessions.</field>
        <field type="uint8_t" name="signal_quality">Signal quality equal to the number of bars displayed on the ISU signal strength indicator. Range is 0 to 5, where 0 indicates no signal and 5 indicates maximum signal strength.</field>
        <field type="uint8_t" name="ring_pending">1: Ring call pending, 0: No call pending.</field>
        <field type="uint8_t" name="tx_session_pending">1: Transmission session pending, 0: No transmission session pending.</field>
        <field type="uint8_t" name="rx_session_pending">1: Receiving session pending, 0: No receiving session pending.</field>
    </message>
    <message id="340" name="UTM_GLOBAL_POSITION">
        <wip/>
        <!-- This message is work-in-progress it can therefore change, and should NOT be used in stable production environments -->
        <description>The global position resulting from GPS and sensor fusion.</description>
        <field type="uint64_t" name="time" units="us">Time of applicability of position (microseconds since UNIX epoch).</field>
        <field type="uint8_t[18]" name="uas_id">Unique UAS ID.</field>
        <field type="int32_t" name="lat" units="degE7">Latitude (WGS84)</field>
        <field type="int32_t" name="lon" units="degE7">Longitude (WGS84)</field>
        <field type="int32_t" name="alt" units="mm">Altitude (WGS84)</field>
        <field type="int32_t" name="relative_alt" units="mm">Altitude above ground</field>
        <field type="int16_t" name="vx" units="cm/s">Ground X speed (latitude, positive north)</field>
        <field type="int16_t" name="vy" units="cm/s">Ground Y speed (longitude, positive east)</field>
        <field type="int16_t" name="vz" units="cm/s">Ground Z speed (altitude, positive down)</field>
        <field type="uint16_t" name="h_acc" units="mm">Horizontal position uncertainty (standard deviation)</field>
        <field type="uint16_t" name="v_acc" units="mm">Altitude uncertainty (standard deviation)</field>
        <field type="uint16_t" name="vel_acc" units="cm/s">Speed uncertainty (standard deviation)</field>
        <field type="int32_t" name="next_lat" units="degE7">Next waypoint, latitude (WGS84)</field>
        <field type="int32_t" name="next_lon" units="degE7">Next waypoint, longitude (WGS84)</field>
        <field type="int32_t" name="next_alt" units="mm">Next waypoint, altitude (WGS84)</field>
        <field type="uint16_t" name="update_rate" units="cs">Time until next update. Set to 0 if unknown or in data driven mode.</field>
        <field type="uint8_t" name="flight_state" enum="UTM_FLIGHT_STATE">Flight state</field>
        <field type="uint8_t" name="flags" enum="UTM_DATA_AVAIL_FLAGS" display="bitmask">Bitwise OR combination of the data available flags.</field>
    </message>
    <message id="350" name="DEBUG_FLOAT_ARRAY">
        <description>Large debug/prototyping array. The message uses the maximum available payload for data. The array_id and name fields are used to discriminate between messages in code and in user interfaces (respectively). Do not use in production code.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="char[10]" name="name">Name, for human-friendly display in a Ground Control Station</field>
        <field type="uint16_t" name="array_id">Unique ID used to discriminate between arrays</field>
        <extensions/>
        <field type="float[58]" name="data">data</field>
    </message>
    <message id="360" name="ORBIT_EXECUTION_STATUS">
        <wip/>
        <!-- This message is work-in-progress it can therefore change, and should NOT be used in stable production environments -->
        <description>Vehicle status report that is sent out while orbit execution is in progress (see MAV_CMD_DO_ORBIT).</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="float" name="radius" units="m">Radius of the orbit circle. Positive values orbit clockwise, negative values orbit counter-clockwise.</field>
        <field type="uint8_t" name="frame" enum="MAV_FRAME">The coordinate system of the fields: x, y, z.</field>
        <field type="int32_t" name="x">X coordinate of center point. Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.</field>
        <field type="int32_t" name="y">Y coordinate of center point.  Coordinate system depends on frame field: local = x position in meters * 1e4, global = latitude in degrees * 1e7.</field>
        <field type="float" name="z" units="m">Altitude of center point. Coordinate system depends on frame field.</field>
    </message>
    <message id="365" name="STATUSTEXT_LONG">
        <description>Status text message (use only for important status and error messages). The full message payload can be used for status text, but we recommend that updates be kept concise. Note: The message is intended as a less restrictive replacement for STATUSTEXT.</description>
        <field type="uint8_t" name="severity" enum="MAV_SEVERITY">Severity of status. Relies on the definitions within RFC-5424.</field>
        <field type="char[254]" name="text">Status text message, without null termination character.</field>
    </message>
    <!-- Smart battery messages -->
    <message id="370" name="SMART_BATTERY_INFO">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Smart Battery information (static/infrequent update). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.</description>
        <field type="uint8_t" name="id">Battery ID</field>
        <field type="int32_t" name="capacity_full_specification" units="mAh">Capacity when full according to manufacturer, -1: field not provided.</field>
        <field type="int32_t" name="capacity_full" units="mAh">Capacity when full (accounting for battery degradation), -1: field not provided.</field>
        <field type="uint16_t" name="cycle_count">Charge/discharge cycle count. -1: field not provided.</field>
        <field type="int32_t" name="serial_number">Serial number. -1: field not provided.</field>
        <field type="char[50]" name="device_name">Static device name. Encode as manufacturer and product names separated using an underscore.</field>
        <field type="uint16_t" name="weight" units="g">Battery weight. 0: field not provided.</field>
        <field type="uint16_t" name="discharge_minimum_voltage" units="mV">Minimum per-cell voltage when discharging. If not supplied set to UINT16_MAX value.</field>
        <field type="uint16_t" name="charging_minimum_voltage" units="mV">Minimum per-cell voltage when charging. If not supplied set to UINT16_MAX value.</field>
        <field type="uint16_t" name="resting_minimum_voltage" units="mV">Minimum per-cell voltage when resting. If not supplied set to UINT16_MAX value.</field>
    </message>
    <message id="371" name="SMART_BATTERY_STATUS">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Smart Battery information (dynamic). Use for updates from: smart battery to flight stack, flight stack to GCS. Use instead of BATTERY_STATUS for smart batteries.</description>
        <field type="uint16_t" name="id">Battery ID</field>
        <field type="int16_t" name="capacity_remaining" units="%">Remaining battery energy. Values: [0-100], -1: field not provided.</field>
        <field type="int16_t" name="current" units="cA">Battery current (through all cells/loads). Positive if discharging, negative if charging. UINT16_MAX: field not provided.</field>
        <field type="int16_t" name="temperature" units="cdegC">Battery temperature. -1: field not provided.</field>
        <field type="int32_t" name="fault_bitmask" display="bitmask" enum="MAV_SMART_BATTERY_FAULT">Fault/health indications.</field>
        <field type="int32_t" name="time_remaining" units="s">Estimated remaining battery time. -1: field not provided.</field>
        <field type="uint16_t" default="0" name="cell_offset">The cell number of the first index in the 'voltages' array field. Using this field allows you to specify cell voltages for batteries with more than 16 cells.</field>
        <field type="uint16_t[16]" name="voltages" units="mV">Individual cell voltages. Batteries with more 16 cells can use the cell_offset field to specify the cell offset for the array specified in the current message . Index values above the valid cell count for this battery should have the UINT16_MAX value.</field>
    </message>
    <message id="375" name="ACTUATOR_OUTPUT_STATUS">
        <description>The raw values of the actuator outputs (e.g. on Pixhawk, from MAIN, AUX ports). This message supersedes SERVO_OUTPUT_RAW.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (since system boot).</field>
        <field type="uint32_t" name="active" display="bitmask">Active outputs</field>
        <field type="float[32]" name="actuator">Servo / motor output array values. Zero values indicate unused channels.</field>
    </message>
    <message id="380" name="TIME_ESTIMATE_TO_TARGET">
        <wip/>
        <!-- This message is work-in-progress it can therefore change, and should NOT be used in stable production environments -->
        <description>Time/duration estimates for various events and actions given the current vehicle state and position.</description>
        <field type="int32_t" name="safe_return" units="s">Estimated time to complete the vehicle's configured "safe return" action from its current position (e.g. RTL, Smart RTL, etc.). -1 indicates that the vehicle is landed, or that no time estimate available.</field>
        <field type="int32_t" name="land" units="s">Estimated time for vehicle to complete the LAND action from its current position. -1 indicates that the vehicle is landed, or that no time estimate available.</field>
        <field type="int32_t" name="mission_next_item" units="s">Estimated time for reaching/completing the currently active mission item. -1 means no time estimate available.</field>
        <field type="int32_t" name="mission_end" units="s">Estimated time for completing the current mission. -1 means no mission active and/or no estimate available.</field>
        <field type="int32_t" name="commanded_action" units="s">Estimated time for completing the current commanded action (i.e. Go To, Takeoff, Land, etc.). -1 means no action active and/or no estimate available.</field>
    </message>
    <message id="385" name="TUNNEL">
        <wip/>
        <!-- This message is work-in-progress it can therefore change, and should NOT be used in stable production environments -->
        <description>Message for transporting "arbitrary" variable-length data from one component to another (broadcast is not forbidden, but discouraged). The encoding of the data is usually extension specific, i.e. determined by the source, and is usually not documented as part of the MAVLink specification.</description>
        <field type="uint8_t" name="target_system">System ID (can be 0 for broadcast, but this is discouraged)</field>
        <field type="uint8_t" name="target_component">Component ID (can be 0 for broadcast, but this is discouraged)</field>
        <field type="uint16_t" name="payload_type" enum="MAV_TUNNEL_PAYLOAD_TYPE">A code that identifies the content of the payload (0 for unknown, which is the default). If this code is less than 32768, it is a 'registered' payload type and the corresponding code should be added to the MAV_TUNNEL_PAYLOAD_TYPE enum. Software creators can register blocks of types as needed. Codes greater than 32767 are considered local experiments and should not be checked in to any widely distributed codebase.</field>
        <field type="uint8_t" name="payload_length">Length of the data transported in payload</field>
        <field type="uint8_t[128]" name="payload">Variable length payload. The payload length is defined by payload_length. The entire content of this block is opaque unless you understand the encoding specified by payload_type.</field>
    </message>
    <message id="390" name="ONBOARD_COMPUTER_STATUS">
        <wip/>
        <!-- This message is work-in-progress it can therefore change, and should NOT be used in stable production environments -->
        <description>Hardware status sent by an onboard computer.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude the number.</field>
        <field type="uint32_t" name="uptime" units="ms">Time since system boot.</field>
        <field type="uint8_t" name="type">Type of the onboard computer: 0: Mission computer primary, 1: Mission computer backup 1, 2: Mission computer backup 2, 3: Compute node, 4-5: Compute spares, 6-9: Payload computers.</field>
        <field type="uint8_t[8]" name="cpu_cores">CPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.</field>
        <field type="uint8_t[10]" name="cpu_combined">Combined CPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.</field>
        <field type="uint8_t[4]" name="gpu_cores">GPU usage on the component in percent (100 - idle). A value of UINT8_MAX implies the field is unused.</field>
        <field type="uint8_t[10]" name="gpu_combined">Combined GPU usage as the last 10 slices of 100 MS (a histogram). This allows to identify spikes in load that max out the system, but only for a short amount of time. A value of UINT8_MAX implies the field is unused.</field>
        <field type="int8_t" name="temperature_board" units="degC">Temperature of the board. A value of INT8_MAX implies the field is unused.</field>
        <field type="int8_t[8]" name="temperature_core" units="degC">Temperature of the CPU core. A value of INT8_MAX implies the field is unused.</field>
        <field type="int16_t[4]" name="fan_speed" units="rpm">Fan speeds. A value of INT16_MAX implies the field is unused.</field>
        <field type="uint32_t" name="ram_usage" units="MiB">Amount of used RAM on the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t" name="ram_total" units="MiB">Total amount of RAM on the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[4]" name="storage_type">Storage type: 0: HDD, 1: SSD, 2: EMMC, 3: SD card (non-removable), 4: SD card (removable). A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[4]" name="storage_usage" units="MiB">Amount of used storage space on the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[4]" name="storage_total" units="MiB">Total amount of storage space on the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[6]" name="link_type">Link type: 0-9: UART, 10-19: Wired network, 20-29: Wifi, 30-39: Point-to-point proprietary, 40-49: Mesh proprietary</field>
        <field type="uint32_t[6]" name="link_tx_rate" units="KiB/s">Network traffic from the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[6]" name="link_rx_rate" units="KiB/s">Network traffic to the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[6]" name="link_tx_max" units="KiB/s">Network capacity from the component system. A value of UINT32_MAX implies the field is unused.</field>
        <field type="uint32_t[6]" name="link_rx_max" units="KiB/s">Network capacity to the component system. A value of UINT32_MAX implies the field is unused.</field>
    </message>
    <message id="400" name="PLAY_TUNE_V2">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Play vehicle tone/tune (buzzer). Supersedes message PLAY_TUNE.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint32_t" name="format" enum="TUNE_FORMAT">Tune format</field>
        <field type="char[248]" name="tune">Tune definition as a NULL-terminated string.</field>
    </message>
    <message id="401" name="SUPPORTED_TUNES">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change. It should NOT be used in stable production environments. -->
        <description>Tune formats supported by vehicle. This should be emitted as response to MAV_CMD_REQUEST_MESSAGE.</description>
        <field type="uint8_t" name="target_system">System ID</field>
        <field type="uint8_t" name="target_component">Component ID</field>
        <field type="uint32_t" name="format" enum="TUNE_FORMAT" display="bitmask">Bitfield of supported tune formats.</field>
    </message>
    <!-- Rover specific messages -->
    <message id="9000" name="WHEEL_DISTANCE">
        <description>Cumulative distance traveled for each reported wheel.</description>
        <field type="uint64_t" name="time_usec" units="us">Timestamp (synced to UNIX time or since system boot).</field>
        <field type="uint8_t" name="count">Number of wheels reported.</field>
        <field type="double[16]" name="distance" units="m">Distance reported by individual wheel encoders. Forward rotations increase values, reverse rotations decrease them. Not all wheels will necessarily have wheel encoders; the mapping of encoders to wheel positions must be agreed/understood by the endpoints.</field>
    </message>
    <message id="12900" name="OPEN_DRONE_ID_BASIC_ID">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>Data for filling the OpenDroneID Basic ID message. This and the below messages are primarily meant for feeding data to/from an OpenDroneID implementation. E.g. https://github.com/opendroneid/opendroneid-core-c</description>
        <field type="uint8_t" name="id_type" enum="MAV_ODID_ID_TYPE">Indicates the format for the uas_id field of this message.</field>
        <field type="uint8_t" name="ua_type" enum="MAV_ODID_UA_TYPE">Indicates the type of UA (Unmanned Aircraft).</field>
        <field type="uint8_t[20]" name="uas_id">UAS (Unmanned Aircraft System) ID following the format specified by id_type. Shall be filled with nulls in the unused portion of the field.</field>
    </message>
    <message id="12901" name="OPEN_DRONE_ID_LOCATION">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>Data for filling the OpenDroneID Location message. The float data types are 32-bit IEEE 754. The Location message provides the location, altitude, direction and speed of the aircraft.</description>
        <field type="uint8_t" name="status" enum="MAV_ODID_STATUS">Indicates whether the Unmanned Aircraft is on the ground or in the air.</field>
        <field type="uint16_t" name="direction" units="cdeg">Direction over ground (not heading, but direction of movement) in degrees * 100: 0.0 - 359.99 degrees. If unknown: 361.00 degrees.</field>
        <field type="uint16_t" name="speed_horizontal" units="cm/s">Ground speed. Positive only. If unknown: 255.00 m/s. If speed is larger than 254.25 m/s, use 254.25 m/s.</field>
        <field type="int16_t" name="speed_vertical" units="cm/s">The vertical speed. Up is positive. If unknown: 63.00 m/s. If speed is larger than 62.00 m/s, use 62.00 m/s.</field>
        <field type="int32_t" name="latitude" units="degE7">Current latitude of the UA (Unmanned Aircraft). If unknown: 0 deg (both Lat/Lon).</field>
        <field type="int32_t" name="longitude" units="degE7">Current longitude of the UA (Unmanned Aircraft). If unknown: 0 deg (both Lat/Lon).</field>
        <field type="float" name="altitude_barometric" units="m">The altitude calculated from the barometric pressue. Reference is against 29.92inHg or 1013.2mb. If unknown: -1000 m.</field>
        <field type="float" name="altitude_geodetic" units="m">The geodetic altitude as defined by WGS84. If unknown: -1000 m.</field>
        <field type="uint8_t" name="height_reference" enum="MAV_ODID_HEIGHT_REF">Indicates the reference point for the height field.</field>
        <field type="float" name="height" units="m">The current height of the UA (Unmanned Aircraft) above the take-off location or the ground as indicated by height_reference. If unknown: -1000 m.</field>
        <field type="uint8_t" name="horizontal_accuracy" enum="MAV_ODID_HOR_ACC">The accuracy of the horizontal position.</field>
        <field type="uint8_t" name="vertical_accuracy" enum="MAV_ODID_VER_ACC">The accuracy of the vertical position.</field>
        <field type="uint8_t" name="barometer_accuracy" enum="MAV_ODID_VER_ACC">The accuracy of the barometric altitude.</field>
        <field type="uint8_t" name="speed_accuracy" enum="MAV_ODID_SPEED_ACC">The accuracy of the horizontal and vertical speed.</field>
        <field type="float" name="timestamp" units="s">Seconds after the full hour. Typically the GPS outputs a time of week value in milliseconds. That value can be easily converted for this field using ((float) (time_week_ms % (60*60*1000))) / 1000.</field>
        <field type="uint8_t" name="timestamp_accuracy" enum="MAV_ODID_TIME_ACC">The accuracy of the timestamps.</field>
    </message>
    <message id="12902" name="OPEN_DRONE_ID_AUTHENTICATION">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>Data for filling the OpenDroneID Authentication message. The Authentication Message defines a field that can provide a means of authenticity for the identity of the UAS (Unmanned Aircraft System). The Authentication message can have two different formats. Five data pages are supported. For data page 0, the fields PageCount, Length and TimeStamp are present and AuthData is only 17 bytes. For data page 1 through 4, PageCount,Length and TimeStamp are not present and the size of AuthData is 23 bytes.</description>
        <field type="uint8_t" name="authentication_type" enum="MAV_ODID_AUTH_TYPE">Indicates the type of authentication.</field>
        <field type="uint8_t" name="data_page">Allowed range is 0 - 4.</field>
        <field type="uint8_t" name="page_count">This field is only present for page 0. Allowed range is 0 - 5.</field>
        <field type="uint8_t" name="length" units="bytes">This field is only present for page 0. Total bytes of authentication_data from all data pages. Allowed range is 0 - 109 (17 + 23*4).</field>
        <field type="uint32_t" name="timestamp" units="s">This field is only present for page 0. 32 bit Unix Timestamp in seconds since 00:00:00 01/01/2019.</field>
        <field type="uint8_t[23]" name="authentication_data">Opaque authentication data. For page 0, the size is only 17 bytes. For other pages, the size is 23 bytes. Shall be filled with nulls in the unused portion of the field.</field>
    </message>
    <message id="12903" name="OPEN_DRONE_ID_SELF_ID">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>Data for filling the OpenDroneID Self ID message. The Self ID Message is an opportunity for the operator to (optionally) declare their identity and purpose of the flight. This message can provide additional information that could reduce the threat profile of a UA (Unmanned Aircraft) flying in a particular area or manner.</description>
        <field type="uint8_t" name="description_type" enum="MAV_ODID_DESC_TYPE">Indicates the type of the description field.</field>
        <field type="char[23]" name="description">Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.</field>
    </message>
    <message id="12904" name="OPEN_DRONE_ID_SYSTEM">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>Data for filling the OpenDroneID System message. The System Message contains general system information including the operator location and possible aircraft group information.</description>
        <field type="uint8_t" name="flags" enum="MAV_ODID_LOCATION_SRC">Specifies the location source for the operator location.</field>
        <field type="int32_t" name="operator_latitude" units="degE7">Latitude of the operator. If unknown: 0 deg (both Lat/Lon).</field>
        <field type="int32_t" name="operator_longitude" units="degE7">Longitude of the operator. If unknown: 0 deg (both Lat/Lon).</field>
        <field type="uint16_t" name="area_count">Number of aircraft in the area, group or formation (default 1).</field>
        <field type="uint16_t" name="area_radius" units="m">Radius of the cylindrical area of the group or formation (default 0).</field>
        <field type="float" name="area_ceiling" units="m">Area Operations Ceiling relative to WGS84. If unknown: -1000 m.</field>
        <field type="float" name="area_floor" units="m">Area Operations Floor relative to WGS84. If unknown: -1000 m.</field>
    </message>
    <message id="12905" name="OPEN_DRONE_ID_OPERATOR_ID">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>Data for filling the OpenDroneID Operator ID message, which contains the CAA (Civil Aviation Authority) issued operator ID.</description>
        <field type="uint8_t" name="operator_id_type" enum="MAV_ODID_OPERATOR_ID_TYPE">Indicates the type of the operator_id field.</field>
        <field type="char[20]" name="operator_id">Text description or numeric value expressed as ASCII characters. Shall be filled with nulls in the unused portion of the field.</field>
    </message>
    <!-- The message ids 12906 - 12914 are reserved for OpenDroneID. -->
    <message id="12915" name="OPEN_DRONE_ID_MESSAGE_PACK">
        <wip/>
        <!-- This message is work-in-progress and it can therefore change, and should NOT be used in stable production environments -->
        <description>An OpenDroneID message pack is a container for multiple encoded OpenDroneID messages (i.e. not in the format given for the above messages descriptions but after encoding into the compressed OpenDroneID byte format). Used e.g. when transmitting on Bluetooth 5.0 Long Range/Extended Advertising or on WiFi Neighbor Aware Networking.</description>
        <field type="uint8_t" name="single_message_size" units="bytes">This field must currently always be equal to 25 bytes, since all encoded OpenDroneID messages are specificed to have this length.</field>
        <field type="uint8_t" name="msg_pack_size">Number of encoded messages in the pack (not the number of bytes). Allowed range is 1 - 10.</field>
        <field type="uint8_t[250]" name="messages">Concatenation of encoded OpenDroneID messages. Shall be filled with nulls in the unused portion of the field.</field>
    </message>
</messages>